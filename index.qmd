---
title: "F칮rste m칮de med Python og UCloud"
subtitle: ""
author: "Jeppe Fjeldgaard Qvist"
date: today
format: 
  revealjs:
    include-after-body: "/Users/jeppefl/Library/CloudStorage/OneDrive-AalborgUniversitet/01_work/undervisning/udvikling-it/slides/lektion-1/resources/timer.html"
    slide-number: c
    show-slide-number: print
    embed-resources: true
    self-contained-math: true
    smaller: true
    scrollable: true
    theme: default
    include-in-header: 
      - text: |
          <script src="https://cdn.jsdelivr.net/pyodide/v0.26.4/full/pyodide.js"></script>
          <link rel="stylesheet" href="resources/pyodide-styles.css">
          <script src="resources/pyodide-setup.js"></script>
---

## Kodning?! 游냀

- Hvad er jeres erfaring (hvis I har nogen)? 

- Hvordan forst친r i "kodning"; hvorfor bruger vi ikke bare Excel eller lign.? 

- Hvis I har erfaring; er det en god erfaring? Hvordan l칝rte i det bedst; hvad var sv칝rt? 

<span class="timer" data-time="300"></span>

## "Kodning" vs. Excel 

### *Reproducerbar*, *skalerbar*, *fleksibel* og *automatisering*!

N친r Excel kommer til kort: 

- Analysere 100.000-vis af r칝kker data.

- Gentage den samme analyse hver [dag/m친ned/친r] med nye data.

  - I Excel: hvis data 칝ndrer sig, skal vi gentage alle klik.

- Dokumentere pr칝cist, hvad vi har gjort, s친 en kollega kan gentage det.

- Kombinere data fra [mange] forskellige kilder.

- Lave avancerede statistiske modeller.

## Python; et kodesprog 

<span class="timer" data-time="180"></span>

T칝nk p친 kodning som et *meget detaljeret* opskrift. S친 fremfor en abstract "bland ingredienserne" (Excel; peg-og-klik), skriver vi: 

<div class="code-container">
<div class="code-input">
<textarea class="python-editor" id="code1">

# Hent biblioteker
import pandas as pd
from io import StringIO

# Hent data fra URL
url = "https://tinyurl.com/3p843y7k"

data = pd.read_csv(StringIO(csv_data))

# Beregn gennemsnit for hver m친ned
monthly_average = data.groupby('month')['sales'].mean()

print("\nM친nedlige gennemsnit:")
print(monthly_average)

</textarea>
<button class="run-button" onclick="runPython(document.getElementById('code1').value, 'output1')">
  <img src="resources/python-file.png" alt="Python" style="height: 50px;">
</button>
<button class="reset-button" onclick="resetPythonGlobals()">
  <img src="resources/dust.png" alt="Python" style="height: 50px;">
</button>
</div>
<div class="code-output" id="output1"></div>
</div>



## Reproducerbar

> Hvordan fik du resultatet? 

`monthly_average = data.groupby('month')['sales'].mean()`

<br><br>

*Alle trin i koden er en komplet **log** over hvad du har gjort ved dataen for at f친 dit output*. 

N친r n칝ste 친rs data kommer, 칝ndres blot `url = "https://...."` til den nye data og det hele k칮res igen. 

## Skalerbarhed

*Den samme kode, der arbejder med 100 r칝kker, kan h친ndtere millioner af r칝kker uden problemer.* 

<br><br>

Flere r칝kker kr칝ver dog logisk nok mere computerkraft og tid. 

## Fleksibilitet

*Python har tusindvis af specialiserede "v칝rkt칮jskasser" (biblioteker) til alt fra grundl칝ggende statistik og datah친ndtering til machine learning og kunstig intelligens.*

## Automatisering 

*Skriv koden 칠n gang:* k칮r den hver dag/uge/m친ned/친r automatisk.

## Kodning: *Kommunikation med maskinen* 

Kodning skal v칝re *utvetydigt og logisk struktureret* for at maskinen "forst친r" os.

I skal p친 kurset oparbejde en **algoritmisk t칝nkning**. 

---

<span class="timer" data-time="180"></span>


::: {.incremental}

**Spg.:** Hvad t칝nker I n친r i h칮rer ordet *'Algoritme'*?

- *Algoritmisk t칝nkning*:

  - **Dekomposition**: Bryde komplekse problemer ned i mindre, h친ndterbare dele
  - **M칮nstergenkendelse**: Identificere ligheder p친 tv칝rs af forskellige problemer
  - **Abstraktion**: Fokusere p친 de v칝sentlige aspekter og ignorere irrelevante detaljer
  - **Algoritmedesign**: Step-by-step l칮sninger der kan automatiseres

:::

## Hvorfor Python? 游냀

- (Relativt) simpelt. 

- Stor brugerbase. 

- Omfattende biblioteker til alle forskningsomr친der.

## Kodning af en tanke til handling i 4 niveauer

## *Niveau 1*: Menneskelig tanke

> "Jeg vil finde gennemsnittet af mine salgstal"

## *Niveau 2*: Algoritmisk t칝nkning

> "L칝g alle tallene sammen, divider med antallet af tal"

<br><br><br><br>

$$
\bar{x} = \frac{x_1 + x_2 + x_3 + \ldots + x_n}{n} = \frac{\sum_{i=1}^{n} x_i}{n}
$$

## *Niveau 3*: Python-kode

<div class="code-container">
<div class="code-input">
<textarea class="python-editor" id="code2">

total = sum(data['sales'])  

gennemsnit = total / len(data['sales'])

print(f"Total salg: {total}")
print(f"Gennemsnit: {gennemsnit}")

</textarea>
<button class="run-button" onclick="runPython(document.getElementById('code2').value, 'output2')">
  <img src="resources/python-file.png" alt="Python" style="height: 50px;">
</button>
<button class="reset-button" onclick="resetPythonGlobals()">
  <img src="resources/dust.png" alt="Python" style="height: 50px;">
</button>
</div>
<div class="code-output" id="output2"></div>
</div>

::: {.incremental}

Hvad har vi implementeret her: 

1. $\text{total} = \sum_{i=1}^{n} \text{sales}_i$

2. $\text{gennemsnit} = \frac{\text{total}}{n} = \frac{\sum_{i=1}^{n} \text{sales}_i}{n}$, Hvor $n$ er antallet af salgstal i datas칝ttet.

3. Udskriv resultatet

:::

## *Niveau 4*: Maskinsprog 

Maskinen forst친r ikke `Python` (?!)

- Computeren forst친r kun maskinkode. Dette er lav-niveau instruktioner best친ende af $1$-taller og $0$'er (binary), som **CPU**'en kan arbejde med.

- **Python-fortolkeren** overs칝tter alts친 koden til noget som maskinen kan forst친; og Python er muligt at l칝se for mennesker. 

- Denne overs칝ttelse forg친r i en mellemform (assembly-sprog), der er **meget** mere besv칝rligt at arbejde med end Python. 

---

**Process:**

H칮j-niveau: 

```
total = sum(data)  
gennemsnit = total / len(data)
```

Mellem-niveau: 

```
LOAD data
ADD all values
DIVIDE by count
STORE result
```

Lav-niveau: 

```
10110000 01100001
```

## Pr칝cision er n칮glen! 

> "Kan du hente en kop kaffen?" 

Vi forst친r implicit: **G친 ud i k칮kkenet, tag en kop, h칝ld kaffe i koppen, kom tilbage**.

Oversat til eksplicitte instruktioner:

::: {.incremental}

1. `cup = get_cup_from_kitchen()`
2. `coffee = pour_coffee(cup)`
3. `return coffee_to_desk(cup)`

:::

## Pr칝cise instrukser 

> Hvilke salg er st칮rre end 10.000 (DKK)?

1. Tag f칮rste tal fra listen
2. Er det st칮rre end 10.000? Hvis ja, print det
3. Tag n칝ste tal
4. Gentag (2)
5. Gentag 1-4 indtil listen er tom

---


<div class="code-container">
<div class="code-input">
<textarea class="python-editor" id="code1.1">

for tal in data['sales']:
    if tal > 10000:
        print("H칮jt salg:", tal)

</textarea>
<button class="run-button" onclick="runPython(document.getElementById('code1.1').value, 'output1.1')">
  <img src="resources/python-file.png" alt="Python" style="height: 50px;">
</button>
<button class="reset-button" onclick="resetPythonGlobals()">
  <img src="resources/dust.png" alt="Python" style="height: 50px;">
</button>
</div>
<div class="code-output" id="output1.1"></div>
</div>

$$
\begin{aligned}
\textbf{for hvert } \text{tal} ~ i ~ \text{salgstal}: \\
\quad \textbf{hvis } \text{tal} ~st칮rre~end~ 10000: \\
\qquad \textbf{udskriv} ~ \text{tal} ~~
\end{aligned}
$$

## Variable og Pythons *hukommelse* 

**Bem칝rk**: `data` har virket flere steder i vores kode, selvom vi kun har indl칝st den 칠n gang. 

<div class="code-container">
<div class="code-input">
<textarea class="python-editor" id="code3">

pris = 100

moms = pris * 0.25

total = pris + moms

print(total)

</textarea>
<button class="run-button" onclick="runPython(document.getElementById('code3').value, 'output3')">
  <img src="resources/python-file.png" alt="Python" style="height: 50px;">
</button>
<button class="reset-button" onclick="resetPythonGlobals()">
  <img src="resources/dust.png" alt="Python" style="height: 50px;">
</button>
</div>
<div class="code-output" id="output3"></div>
</div>

---

<br><br>

```
pris = 100

moms = pris * 0.25

total = pris + moms

print(total)
```

<br>

1. Tag v칝rdien 100 og gem det i **hukommelseslokation** kaldet 'pris'

2. Tag v칝rdien fra 'pris', gang med 0.25, gem resultatet som 'moms'

Maskinen er ligeglad med om navne giver mening. Vi bruger **meningsfulde navne** for at forst친 vores egen kode. 

## Funktioner: Genanvendelige "opskrifter"

**Defination af funktioner** svarer til at l칝re maskinen en ny "kommando". Nu kan vi sige `beregn_moms(tal)` og maskinen ved pr칝cist, hvad den skal g칮re, fordi vi har defineret hver eneste trin.

<div class="code-container">
<div class="code-input">
<textarea class="python-editor" id="code4">

def beregn_moms(pris, moms_sats=0.25):
    return pris * moms_sats

</textarea>
<button class="run-button" onclick="runPython(document.getElementById('code4').value, 'output4')">
  <img src="resources/python-file.png" alt="Python" style="height: 50px;">
</button>
<button class="reset-button" onclick="resetPythonGlobals()">
  <img src="resources/dust.png" alt="Python" style="height: 50px;">
</button>
</div>
<div class="code-output" id="output4"></div>
</div>

---

<div class="code-container">
<div class="code-input">
<textarea class="python-editor" id="code5">

print(beregn_moms(12485))

print(beregn_moms(12485, moms_sats=0.12))

</textarea>
<button class="run-button" onclick="runPython(document.getElementById('code5').value, 'output5')">
  <img src="resources/python-file.png" alt="Python" style="height: 50px;">
</button>
<button class="reset-button" onclick="resetPythonGlobals()">
  <img src="resources/dust.png" alt="Python" style="height: 50px;">
</button>
</div>
<div class="code-output" id="output5"></div>
</div>

## Den fundamentale erkendelse om maskiner 

Maskiner er utroligt dumme men **utroligt hurtige og p친lidelige**. De kan kun g칮re simple ting som:

- Gemme tal
- Sammenligne v칝rdier
- Hoppe til forskellige dele af koden
- Gentage instruktioner

Men de kan g칮re disse simple ting milliarder af gange per sekund uden fejl.

> **Kodningens kunst** ligger i at bryde komplekse menneskelige problemer ned til disse simple operationer og derefter komponere dem sammen til kraftfulde l칮sninger.

## *Computational Social Science* 

Eks.: *Digitale metoder til kriminalitetsforst친else*

Analytisk g친r vi g친r fra **sm친, lokale unders칮gelser** til analyser af **massive datas칝t** der kan afsl칮re m칮nstre, vi aldrig kunne have set med traditionelle metoder.

::: {style="font-size: 0.7em;"}

- **Traditionel tilgang**: En kriminolog interviewer 50 tidligere indsatte over 6 m친neder for at forst친 tilbagefald-m칮nstre.

- **Computational tilgang**: Analyser alle $n$ millioner straffesager fra de sidste 20 친r og identificer risikofaktorer for tilbagefald.

:::

<div class="code-container">
<div class="code-input">
<textarea class="python-editor" id="code6">

# Find tilbagefalds-m칮nstre i nationale registre
url = "https://tinyurl.com/3ja8pcfv"

recidiv_data = pd.read_csv(url)

risiko_faktorer = recidiv_data.groupby(['krimtype', 'tidligere_domme']).agg({
    'dage_til_tilbagefald': 'median'
})

print(risiko_faktorer)

</textarea>
<button class="run-button" onclick="runPython(document.getElementById('code6').value, 'output6')">
  <img src="resources/python-file.png" alt="Python" style="height: 50px;">
</button>
<button class="reset-button" onclick="resetPythonGlobals()">
  <img src="resources/dust.png" alt="Python" style="height: 50px;">
</button>
</div>
<div class="code-output" id="output6"></div>
</div>

## *Spatial* kriminologi: N친r kriminalitet [data] f친r koordinater

<div class="code-container">
<div class="code-input">
<textarea class="python-editor" id="code7">

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.cluster import DBSCAN
from io import StringIO

url = "https://tinyurl.com/4r8tj95v"
crime_data = pd.read_csv(url)  

coords = crime_data[['latitude', 'longitude']]
clusters = DBSCAN(eps=0.005, min_samples=2).fit(coords)

# Visualiser p친 kort
fig, ax = plt.subplots(figsize=(12, 8))

scatter = ax.scatter(crime_data['longitude'], crime_data['latitude'], 
                    c=clusters.labels_, 
                    cmap='viridis', 
                    alpha=0.7, 
                    s=60, 
                    edgecolors='black', 
                    linewidth=0.5)

ax.set_xlabel('Longitude')
ax.set_ylabel('Latitude')
ax.set_title('Kriminalitets Hot Spots\n(Farver viser clusters)')
ax.grid(True, alpha=0.3)

# Tilf칮j colorbar
cbar = plt.colorbar(scatter)
cbar.set_label('Cluster ID (-1 = st칮j/outliers)')

plt.tight_layout()
plt.show()

</textarea>
<button class="run-button" onclick="runPython(document.getElementById('code7').value, 'output7')">
  <img src="resources/python-file.png" alt="Python" style="height: 50px;">
</button>
<button class="reset-button" onclick="resetPythonGlobals()">
  <img src="resources/dust.png" alt="Python" style="height: 50px;">
</button>
</div>
<div class="code-output" id="output7"></div>
</div>

# Arbejde [med Python] i UCloud 

## Cloud computing and HPC 

- **HPC**: At bruge mange kraftige computere, som er koblet sammen i store klynger (clusters), til at l칮se komplekse og kr칝vende opgaver.

- **Cloud computing**: Adgang til computerressourcer (fx programmer, lagerplads og regnekraft) via internettet, fremfor at have det hele installeret p친 sin egen computer.

- **UCloud**: En dansk platform udviklet af Syddansk Universitet (SDU) og Aalborg Universitet (AAU). Den g칮r det muligt for forskere, undervisere og studerende at udnytte HPC-ressourcer p친 en enkel m친de.

::: {style="font-size: 0.7em;"}

  - **K칮re programmer uden installation**: UCloud tilbyder et bibliotek af applikationer (fx RStudio, Jupyter Notebooks, MATLAB, Stata, Python, osv.), som kan startes direkte i browseren.

  - **Brug HPC-ressourcer:** N친r du starter en applikation, v칝lger du selv hvor meget regnekraft (CPU, GPU, RAM) du har brug for. Du arbejder stadig i en browser, men beregningen sker p친 en HPC-klynge.

  - **Datah친ndtering**: Du kan uploade, downloade og organisere dine data direkte i UCloud. Der er ogs친 muligheder for sikker deling af data med kolleger.

  - **Samarbejde**: Projekter i UCloud kan deles med andre brugere, s친 man kan arbejde p친 de samme data og applikationer.

::: 

## UCloud i praksis

1. **Log ind** med WAYF (universitetslogin).

2. **V칝lg et projekt**: Al arbejde i UCloud foreg친r i projekter, hvor du kan organisere applikationer, data og brugere.

3. **Start en applikation**: Fx Jupyter, og v칝lg hvor meget regnekraft du skal bruge.

4. Arbejd som normalt i applikationen, men med adgang til langt kraftigere ressourcer end din egen computer.

5. Gem og del resultater: alt bliver gemt i dit projekt, og kan deles med andre eller eksporteres til lokal computer.