---
title: "F칮rste m칮de med Python og UCloud"
subtitle: ""
author: "Jeppe Fjeldgaard Qvist"
date: today
format: 
  revealjs:
    include-after-body: "/Users/jeppefl/Library/CloudStorage/OneDrive-AalborgUniversitet/01_work/undervisning/udvikling-it/slides/lektion-1/resources/timer.html"
    slide-number: c
    show-slide-number: print
    embed-resources: true
    self-contained-math: true
    smaller: true
    scrollable: true
    theme: default
    include-in-header: 
      - text: |
          <script src="https://cdn.jsdelivr.net/pyodide/v0.26.4/full/pyodide.js"></script>
          <link rel="stylesheet" href="resources/pyodide-styles.css">
          <script src="resources/pyodide-setup.js"></script>
---

## Kodning?! 游냀

- Hvad er jeres erfaring (hvis I har nogen)? 

- Hvordan forst친r i "kodning"; hvorfor bruger vi ikke bare Excel eller lign.? 

- Hvis I har erfaring; er det en god erfaring? Hvordan l칝rte i det bedst; hvad var sv칝rt? 

<span class="timer" data-time="300"></span>

## "Kodning" vs. Excel 

### *Reproducerbar*, *skalerbar*, *fleksibel* og *automatisering*!

N친r Excel kommer til kort: 

- Analysere 100.000-vis af r칝kker data

- Gentage den samme analyse hver [dag/m친ned/친r] med nye data

  - I Excel [eller lign.], hvis data 칝ndrer sig, skal du gentage alle klik.

- Dokumentere pr칝cist, hvad du har gjort, s친 en kollega kan gentage det

- Kombinere data fra [mange] forskellige kilder

- Lave avancerede statistiske modeller

## Python; et kodesprog 

<span class="timer" data-time="180"></span>

T칝nk p친 kodning som et *meget detaljeret* opskrift. S친 fremfor en abstract "bland ingredienserne" (Excel; peg-og-klik), skriver vi: 

<div class="code-container">
<div class="code-input">
<textarea class="python-editor" id="code1">

import pandas as pd

# Hent data fra URL
from io import StringIO
url = "https://raw.githubusercontent.com/jeppeFQ/sds1-lektion-1/refs/heads/master/resources/sales_data.csv"

data = pd.read_csv(StringIO(csv_data))

# Beregn gennemsnit for hver m친ned
monthly_average = data.groupby('month')['sales'].mean()
print("\nM친nedlige gennemsnit:")
print(monthly_average)

</textarea>
<button class="run-button" onclick="runPython(document.getElementById('code1').value, 'output1')">
  <img src="resources/python-file.png" alt="Python" style="height: 50px;">
</button>
<button class="reset-button" onclick="resetPythonGlobals()">
  <img src="resources/dust.png" alt="Python" style="height: 50px;">
</button>
</div>
<div class="code-output" id="output1"></div>
</div>



## Reproducerbar

> Hvordan fik du resultatet? 

`monthly_average = data.groupby('month')['sales'].mean()`

*Alle trin i koden er en komplet **log** over hvad du har gjort ved dataen for at f친 dit output*. N친r n칝ste 친rs data kommer, 칝ndres blot `url = "https://...."` til den nye data og det hele k칮res igen. 

## Skalerbarhed

*Den samme kode, der arbejder med 100 r칝kker, kan h친ndtere 1 million r칝kker uden problemer.*

## Fleksibilitet

*Python har tusindvis af specialiserede "v칝rkt칮jskasser" (biblioteker) til alt fra grundl칝ggende statistik og datah친ndtering til kunstig intelligens.*

## Automatisering 

Skriv koden 칠n gang, k칮r den hver dag/uge/m친ned/친r automatisk.

## Kodning: *Kommunikation med maskinen* 

<span class="timer" data-time="180"></span>

Kodning skal v칝re *utvetydigt og logisk struktureret*

I skal p친 kurset oparbejde en **algoritmisk t칝nkning**. 

::: {.incremental}

- **Dekomposition**: Bryde komplekse problemer ned i mindre, h친ndterbare dele
- **M칮nstergenkendelse**: Identificere ligheder p친 tv칝rs af forskellige problemer
- **Abstraktion**: Fokusere p친 de v칝sentlige aspekter og ignorere irrelevante detaljer
- **Algoritmedesign**: Step-by-step l칮sninger der kan automatiseres

:::

## Hvorfor Python 游냀

- (Relativt) simpelt. 

- Stor brugerbase. 

- Omfattende biblioteker til alle forskningsomr친der.

## Python: Tanke til handling

## *Niveau 1*: Menneskelig tanke

"Jeg vil gerne finde gennemsnittet af mine salgstal"

## *Niveau 2*: Algoritmisk t칝nkning

"L칝g alle tallene sammen, divider med antallet af tal"

$$
\bar{x} = \frac{x_1 + x_2 + x_3 + \ldots + x_n}{n} = \frac{\sum_{i=1}^{n} x_i}{n}
$$

## *Niveau 3*: Python-kode

<div class="code-container">
<div class="code-input">
<textarea class="python-editor" id="code2">

total = sum(data['sales'])  

gennemsnit = total / len(data['sales'])

print(f"Total salg: {total}")
print(f"Gennemsnit: {gennemsnit}")

</textarea>
<button class="run-button" onclick="runPython(document.getElementById('code2').value, 'output2')">
  <img src="resources/python-file.png" alt="Python" style="height: 50px;">
</button>
<button class="reset-button" onclick="resetPythonGlobals()">
  <img src="resources/dust.png" alt="Python" style="height: 50px;">
</button>
</div>
<div class="code-output" id="output2"></div>
</div>

1. $\text{total} = \sum_{i=1}^{n} \text{sales}_i$

2. $\text{gennemsnit} = \frac{\text{total}}{n} = \frac{\sum_{i=1}^{n} \text{sales}_i}{n}$

Hvor $n$ er antallet af salgstal i datas칝ttet.

## *Niveau 4*: Maskinsprog 

```
LOAD data
ADD all values
DIVIDE by count
STORE result
```

--- 

> "Kan du hente en kop kaffen?" 

Vi forst친r implicit: **G친 ud i k칮kkenet, tag en kop, h칝ld kaffe i koppen, kom tilbage**.

Oversat til eksplicitte instruktioner:

::: {.incremental}

- `cup = get_cup_from_kitchen()`
- `coffee = pour_coffee(cup)`
- `return coffee_to_desk(cup)`

:::

## Pr칝cise instrukser 

> Hvilke salg er st칮rre end 10.000 (DKK)?

1. Tag f칮rste tal fra listen
2. Er det st칮rre end 10000? Hvis ja, print det
3. Tag n칝ste tal
3. Gentag indtil listen er tom

---


<div class="code-container">
<div class="code-input">
<textarea class="python-editor" id="code1.1">

for tal in data['sales']:
    if tal > 10000:
        print("H칮jt salg:", tal)

</textarea>
<button class="run-button" onclick="runPython(document.getElementById('code1.1').value, 'output1.1')">
  <img src="resources/python-file.png" alt="Python" style="height: 50px;">
</button>
<button class="reset-button" onclick="resetPythonGlobals()">
  <img src="resources/dust.png" alt="Python" style="height: 50px;">
</button>
</div>
<div class="code-output" id="output1.1"></div>
</div>

## Variable og Pythons hukommelse 

`data` har virket flere steder i vores kode, selvom vi kun har indl칝st den 칠n gang. 

<div class="code-container">
<div class="code-input">
<textarea class="python-editor" id="code3">

pris = 100

moms = pris * 0.25

total = pris + moms

print(total)

</textarea>
<button class="run-button" onclick="runPython(document.getElementById('code3').value, 'output3')">
  <img src="resources/python-file.png" alt="Python" style="height: 50px;">
</button>
<button class="reset-button" onclick="resetPythonGlobals()">
  <img src="resources/dust.png" alt="Python" style="height: 50px;">
</button>
</div>
<div class="code-output" id="output3"></div>
</div>

---

```
pris = 100

moms = pris * 0.25

total = pris + moms

print(total)
```

1. Tag v칝rdien 100 og gem det i hukommelseslokation kaldet 'pris'

2. Tag v칝rdien fra 'pris', gang med 0.25, gem resultatet som 'moms'

Maskinen er ligeglad med om navne giver mening. Vi bruger meningsfulde navne for at forst친 vores egen kode. 

## Funktioner: Genanvendelige "opskrifter"

Defination af funktioner svarer til at l칝re maskinen en ny "kommando". Nu kan vi sige beregn_moms(100) og maskinen ved pr칝cist, hvad den skal g칮re, fordi vi har defineret hver eneste trin.

<div class="code-container">
<div class="code-input">
<textarea class="python-editor" id="code4">

def beregn_moms(pris, moms_sats=0.25):
    return pris * moms_sats

</textarea>
<button class="run-button" onclick="runPython(document.getElementById('code4').value, 'output4')">
  <img src="resources/python-file.png" alt="Python" style="height: 50px;">
</button>
<button class="reset-button" onclick="resetPythonGlobals()">
  <img src="resources/dust.png" alt="Python" style="height: 50px;">
</button>
</div>
<div class="code-output" id="output4"></div>
</div>

---

<div class="code-container">
<div class="code-input">
<textarea class="python-editor" id="code5">

beregn_moms(12485)

beregn_moms(355902, moms_sats=0.12)

</textarea>
<button class="run-button" onclick="runPython(document.getElementById('code5').value, 'output5')">
  <img src="resources/python-file.png" alt="Python" style="height: 50px;">
</button>
<button class="reset-button" onclick="resetPythonGlobals()">
  <img src="resources/dust.png" alt="Python" style="height: 50px;">
</button>
</div>
<div class="code-output" id="output5"></div>
</div>

## Den fundamentale erkendelse om maskiner 

Maskiner er utroligt dumme men utroligt hurtige og p친lidelige. De kan kun g칮re simple ting som:

- Gemme tal
- Sammenligne v칝rdier
- Hoppe til forskellige dele af koden
- Gentage instruktioner

Men de kan g칮re disse simple ting milliarder af gange per sekund uden fejl.

**Kodningens kunst** ligger i at bryde komplekse menneskelige problemer ned til disse simple operationer og derefter komponere dem sammen til kraftfulde l칮sninger.

## Computational Social Science (Digitale metoder til kriminalitetsforst친else)

Vi flytter fra sm친, lokale unders칮gelser til analyser af massive datas칝t der kan afsl칮re m칮nstre, vi aldrig kunne se f칮r.

- **Traditionel tilgang**: En kriminolog interviewer 50 tidligere indsatte over 6 m친neder for at forst친 recidiv-m칮nstre.

- **Computational tilgang**: Analyser alle $n$ millioner straffesager fra de sidste 20 친r og identificer pr칝cise risikofaktorer for tilbagefald.

<div class="code-container">
<div class="code-input">
<textarea class="python-editor" id="code6">

# Find recidiv-m칮nstre i nationale registre
url = "https://raw.githubusercontent.com/jeppeFQ/sds1-lektion-1/refs/heads/master/resources/straffesager_1990_2024.csv"

recidiv_data = pd.read_csv(url)
risiko_faktorer = recidiv_data.groupby(['alder', 'krimtype', 'tidligere_domme']).agg({
    'tilbagefald': 'mean',
    'dage_til_tilbagefald': 'median'
})

</textarea>
<button class="run-button" onclick="runPython(document.getElementById('code6').value, 'output6')">
  <img src="resources/python-file.png" alt="Python" style="height: 50px;">
</button>
<button class="reset-button" onclick="resetPythonGlobals()">
  <img src="resources/dust.png" alt="Python" style="height: 50px;">
</button>
</div>
<div class="code-output" id="output6"></div>
</div>

## Spatial kriminologi: N친r kriminalitet [data] f친r koordinater

<div class="code-container">
<div class="code-input">
<textarea class="python-editor" id="code7">

import geopandas as gpd
import matplotlib.pyplot as plt

# Indl칝s kriminalitetsdata med GPS-koordinater
crime_data = pd.read_csv("copenhagen_crime_2024.csv")

# Identificer hot spots ved clustering
from sklearn.cluster import DBSCAN
coords = crime_data[['latitude', 'longitude']]
clusters = DBSCAN(eps=0.01, min_samples=10).fit(coords)

# Visualiser p친 kort
fig, ax = plt.subplots(figsize=(12, 8))
crime_data.plot(ax=ax, c=clusters.labels_, cmap='viridis')

</textarea>
<button class="run-button" onclick="runPython(document.getElementById('code7').value, 'output7')">
  <img src="resources/python-file.png" alt="Python" style="height: 50px;">
</button>
<button class="reset-button" onclick="resetPythonGlobals()">
  <img src="resources/dust.png" alt="Python" style="height: 50px;">
</button>
</div>
<div class="code-output" id="output7"></div>
</div>

## Netv칝rksanalyse: Kriminelle organisationer [data] som grafer

<div class="code-container">
<div class="code-input">
<textarea class="python-editor" id="code8">

import networkx as nx

# Byg netv칝rk af kriminelle forbindelser
G = nx.Graph()
for _, row in arrest_data.iterrows():
    G.add_edge(row['person1'], row['person2'], 
               weight=row['co_arrests'])

# Find centrale figurer i netv칝rket
centrality = nx.betweenness_centrality(G)
key_players = sorted(centrality.items(), 
                    key=lambda x: x[1], reverse=True)[:10]

# Simuler effekt af at arrestere n칮glepersoner
original_components = nx.number_connected_components(G)
G.remove_nodes_from([player[0] for player in key_players[:3]])
new_components = nx.number_connected_components(G)

</textarea>
<button class="run-button" onclick="runPython(document.getElementById('code8').value, 'output8')">
  <img src="resources/python-file.png" alt="Python" style="height: 50px;">
</button>
<button class="reset-button" onclick="resetPythonGlobals()">
  <img src="resources/dust.png" alt="Python" style="height: 50px;">
</button>
</div>
<div class="code-output" id="output8"></div>
</div>

## Predictive Policing: Algoritmer der forudsiger [data] kriminalitet

<div class="code-container">
<div class="code-input">
<textarea class="python-editor" id="code9">

from sklearn.ensemble import RandomForestClassifier

# Features: vejr, tid, lokation, historiske data
features = ['temperature', 'hour', 'day_of_week', 'previous_crimes_30days', 
           'unemployment_rate', 'distance_to_school']

# Train model til at forudsige risiko for kriminalitet
model = RandomForestClassifier(n_estimators=100)
model.fit(historical_data[features], historical_data['crime_occurred'])

# Forudsig risiko for i morgen
tomorrow_risk = model.predict_proba(tomorrow_data[features])
high_risk_areas = tomorrow_data[tomorrow_risk[:, 1] > 0.7]

</textarea>
<button class="run-button" onclick="runPython(document.getElementById('code9').value, 'output9')">
  <img src="resources/python-file.png" alt="Python" style="height: 50px;">
</button>
<button class="reset-button" onclick="resetPythonGlobals()">
  <img src="resources/dust.png" alt="Python" style="height: 50px;">
</button>
</div>
<div class="code-output" id="output9"></div>
</div>

## Text Mining: Analysere millioner af [text] politirapporter

<div class="code-container">
<div class="code-input">
<textarea class="python-editor" id="code10">

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.cluster import KMeans

# Indl칝s 500,000 politirapporter
reports = pd.read_csv("police_reports_2020_2024.csv")

# Identificer m칮nstre i rapporttekster
vectorizer = TfidfVectorizer(max_features=1000, stop_words='danish')
text_vectors = vectorizer.fit_transform(reports['report_text'])

# Cluster lignende kriminalitetstyper
kmeans = KMeans(n_clusters=15)
clusters = kmeans.fit_predict(text_vectors)

# Find mest karakteristiske ord for hver cluster
feature_names = vectorizer.get_feature_names_out()
for i in range(15):
    cluster_center = kmeans.cluster_centers_[i]
    top_words = [feature_names[j] for j in cluster_center.argsort()[-10:]]
    print(f"Cluster {i}: {', '.join(top_words)}")

</textarea>
<button class="run-button" onclick="runPython(document.getElementById('code10').value, 'output10')">
  <img src="resources/python-file.png" alt="Python" style="height: 50px;">
</button>
<button class="reset-button" onclick="resetPythonGlobals()">
  <img src="resources/dust.png" alt="Python" style="height: 50px;">
</button>
</div>
<div class="code-output" id="output10"></div>
</div>

## De store sp칮rgsm친l: Etik og bias






## 1

<div class="code-container">
<div class="code-input">
<textarea class="python-editor" id="code11">


</textarea>
<button class="run-button" onclick="runPython(document.getElementById('code11').value, 'output11')">
  <img src="resources/python-file.png" alt="Python" style="height: 50px;">
</button>
<button class="reset-button" onclick="resetPythonGlobals()">
  <img src="resources/dust.png" alt="Python" style="height: 50px;">
</button>
</div>
<div class="code-output" id="output11"></div>
</div>




