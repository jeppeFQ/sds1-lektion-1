[
  {
    "objectID": "index.html#kodning",
    "href": "index.html#kodning",
    "title": "F√∏rste m√∏de med Python og UCloud",
    "section": "Kodning?! üêç",
    "text": "Kodning?! üêç\n\nHvad er jeres erfaring (hvis I har nogen)?\nHvordan forst√•r i ‚Äúkodning‚Äù; hvorfor bruger vi ikke bare Excel eller lign.?\nHvis I har erfaring; er det en god erfaring? Hvordan l√¶rte i det bedst; hvad var sv√¶rt?"
  },
  {
    "objectID": "index.html#kodning-vs.-excel",
    "href": "index.html#kodning-vs.-excel",
    "title": "F√∏rste m√∏de med Python og UCloud",
    "section": "‚ÄúKodning‚Äù vs.¬†Excel",
    "text": "‚ÄúKodning‚Äù vs.¬†Excel\nReproducerbar, skalerbar, fleksibel og automatisering!\nN√•r Excel kommer til kort:\n\nAnalysere 100.000-vis af r√¶kker data.\nGentage den samme analyse hver [dag/m√•ned/√•r] med nye data.\n\nI Excel: hvis data √¶ndrer sig, skal vi gentage alle klik.\n\nDokumentere pr√¶cist, hvad vi har gjort, s√• en kollega kan gentage det.\nKombinere data fra [mange] forskellige kilder.\nLave avancerede statistiske modeller."
  },
  {
    "objectID": "index.html#python-et-kodesprog",
    "href": "index.html#python-et-kodesprog",
    "title": "F√∏rste m√∏de med Python og UCloud",
    "section": "Python; et kodesprog",
    "text": "Python; et kodesprog\n\nT√¶nk p√• kodning som et meget detaljeret opskrift. S√• fremfor en abstract ‚Äúbland ingredienserne‚Äù (Excel; peg-og-klik), skriver vi:\n\n\nimport pandas as pd\n\n# Hent data fra URL\nfrom io import StringIO\nurl = \"https://tinyurl.com/3p843y7k\"\n\ndata = pd.read_csv(StringIO(csv_data))\n\n# Beregn gennemsnit for hver m√•ned\nmonthly_average = data.groupby('month')['sales'].mean()\n\nprint(\"\\nM√•nedlige gennemsnit:\")\nprint(monthly_average)"
  },
  {
    "objectID": "index.html#reproducerbar",
    "href": "index.html#reproducerbar",
    "title": "F√∏rste m√∏de med Python og UCloud",
    "section": "Reproducerbar",
    "text": "Reproducerbar\n\nHvordan fik du resultatet?\n\nmonthly_average = data.groupby('month')['sales'].mean()\nAlle trin i koden er en komplet log over hvad du har gjort ved dataen for at f√• dit output.\nN√•r n√¶ste √•rs data kommer, √¶ndres blot url = \"https://....\" til den nye data og det hele k√∏res igen."
  },
  {
    "objectID": "index.html#skalerbarhed",
    "href": "index.html#skalerbarhed",
    "title": "F√∏rste m√∏de med Python og UCloud",
    "section": "Skalerbarhed",
    "text": "Skalerbarhed\nDen samme kode, der arbejder med 100 r√¶kker, kan h√•ndtere millioner af r√¶kker uden problemer. (Flere r√¶kker betyder dog logisk nok mere computerkraft og tid)"
  },
  {
    "objectID": "index.html#fleksibilitet",
    "href": "index.html#fleksibilitet",
    "title": "F√∏rste m√∏de med Python og UCloud",
    "section": "Fleksibilitet",
    "text": "Fleksibilitet\nPython har tusindvis af specialiserede ‚Äúv√¶rkt√∏jskasser‚Äù (biblioteker) til alt fra grundl√¶ggende statistik og datah√•ndtering til machine learning og kunstig intelligens."
  },
  {
    "objectID": "index.html#automatisering",
    "href": "index.html#automatisering",
    "title": "F√∏rste m√∏de med Python og UCloud",
    "section": "Automatisering",
    "text": "Automatisering\nSkriv koden √©n gang, k√∏r den hver dag/uge/m√•ned/√•r automatisk."
  },
  {
    "objectID": "index.html#kodning-kommunikation-med-maskinen",
    "href": "index.html#kodning-kommunikation-med-maskinen",
    "title": "F√∏rste m√∏de med Python og UCloud",
    "section": "Kodning: Kommunikation med maskinen",
    "text": "Kodning: Kommunikation med maskinen\nKodning skal v√¶re utvetydigt og logisk struktureret for at maskine ‚Äúforst√•r‚Äù os.\nI skal p√• kurset oparbejde en algoritmisk t√¶nkning."
  },
  {
    "objectID": "index.html#hvorfor-python",
    "href": "index.html#hvorfor-python",
    "title": "F√∏rste m√∏de med Python og UCloud",
    "section": "Hvorfor Python? üêç",
    "text": "Hvorfor Python? üêç\n\n(Relativt) simpelt.\nStor brugerbase.\nOmfattende biblioteker til alle forskningsomr√•der."
  },
  {
    "objectID": "index.html#kodning-af-en-tanke-til-handling-i-4-niveauer",
    "href": "index.html#kodning-af-en-tanke-til-handling-i-4-niveauer",
    "title": "F√∏rste m√∏de med Python og UCloud",
    "section": "Kodning af en tanke til handling i 4 niveauer",
    "text": "Kodning af en tanke til handling i 4 niveauer"
  },
  {
    "objectID": "index.html#niveau-1-menneskelig-tanke",
    "href": "index.html#niveau-1-menneskelig-tanke",
    "title": "F√∏rste m√∏de med Python og UCloud",
    "section": "Niveau 1: Menneskelig tanke",
    "text": "Niveau 1: Menneskelig tanke\n\n‚ÄúJeg vil finde gennemsnittet af mine salgstal‚Äù"
  },
  {
    "objectID": "index.html#niveau-2-algoritmisk-t√¶nkning",
    "href": "index.html#niveau-2-algoritmisk-t√¶nkning",
    "title": "F√∏rste m√∏de med Python og UCloud",
    "section": "Niveau 2: Algoritmisk t√¶nkning",
    "text": "Niveau 2: Algoritmisk t√¶nkning\n\n‚ÄúL√¶g alle tallene sammen, divider med antallet af tal‚Äù\n\n\n\\[\n\\bar{x} = \\frac{x_1 + x_2 + x_3 + \\ldots + x_n}{n} = \\frac{\\sum_{i=1}^{n} x_i}{n}\n\\]"
  },
  {
    "objectID": "index.html#niveau-3-python-kode",
    "href": "index.html#niveau-3-python-kode",
    "title": "F√∏rste m√∏de med Python og UCloud",
    "section": "Niveau 3: Python-kode",
    "text": "Niveau 3: Python-kode\n\n\ntotal = sum(data['sales'])  \n\ngennemsnit = total / len(data['sales'])\n\nprint(f\"Total salg: {total}\")\nprint(f\"Gennemsnit: {gennemsnit}\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nHvad har vi implementeret her:\n\n\\(\\text{total} = \\sum_{i=1}^{n} \\text{sales}_i\\)\n\\(\\text{gennemsnit} = \\frac{\\text{total}}{n} = \\frac{\\sum_{i=1}^{n} \\text{sales}_i}{n}\\), Hvor \\(n\\) er antallet af salgstal i datas√¶ttet.\nUdskriv resultatet"
  },
  {
    "objectID": "index.html#niveau-4-maskinsprog",
    "href": "index.html#niveau-4-maskinsprog",
    "title": "F√∏rste m√∏de med Python og UCloud",
    "section": "Niveau 4: Maskinsprog",
    "text": "Niveau 4: Maskinsprog\nMaskinen forst√•r ikke Python (?!)\n\nComputeren forst√•r kun maskinkode. Hvilket er lavniveau instruktioner best√•ende af \\(1\\)-taller og \\(0\\)‚Äôer (binary), som CPU‚Äôen kan arbejde med.\nPython fortolkeren overs√¶tter alts√• koden til noget som maskinen kan forst√•: og Python er muligt nemmere at l√¶se for mennesker end maskinkode.\nDenne overs√¶ttelse forg√•r i en mellemform (assembly-sprog), der er meget mere besv√¶rligt at arbejde med end Python, a la:\n\nLOAD data\nADD all values\nDIVIDE by count\nSTORE result\nSom I maskinkode kunne se s√•ledes ud:\n10110000 01100001"
  },
  {
    "objectID": "index.html#pr√¶cision-er-n√∏glen",
    "href": "index.html#pr√¶cision-er-n√∏glen",
    "title": "F√∏rste m√∏de med Python og UCloud",
    "section": "Pr√¶cision er n√∏glen!",
    "text": "Pr√¶cision er n√∏glen!\n\n‚ÄúKan du hente en kop kaffen?‚Äù\n\nVi forst√•r implicit: G√• ud i k√∏kkenet, tag en kop, h√¶ld kaffe i koppen, kom tilbage.\nOversat til eksplicitte instruktioner:\n\ncup = get_cup_from_kitchen()\ncoffee = pour_coffee(cup)\nreturn coffee_to_desk(cup)"
  },
  {
    "objectID": "index.html#pr√¶cise-instrukser",
    "href": "index.html#pr√¶cise-instrukser",
    "title": "F√∏rste m√∏de med Python og UCloud",
    "section": "Pr√¶cise instrukser",
    "text": "Pr√¶cise instrukser\n\nHvilke salg er st√∏rre end 10.000 (DKK)?\n\n\nTag f√∏rste tal fra listen\nEr det st√∏rre end 10000? Hvis ja, print det\nTag n√¶ste tal\nGentag indtil listen er tom"
  },
  {
    "objectID": "index.html#variable-og-pythons-hukommelse",
    "href": "index.html#variable-og-pythons-hukommelse",
    "title": "F√∏rste m√∏de med Python og UCloud",
    "section": "Variable og Pythons hukommelse",
    "text": "Variable og Pythons hukommelse\nBem√¶rk: data har virket flere steder i vores kode, selvom vi kun har indl√¶st den √©n gang.\n\n\npris = 100\n\nmoms = pris * 0.25\n\ntotal = pris + moms\n\nprint(total)"
  },
  {
    "objectID": "index.html#funktioner-genanvendelige-opskrifter",
    "href": "index.html#funktioner-genanvendelige-opskrifter",
    "title": "F√∏rste m√∏de med Python og UCloud",
    "section": "Funktioner: Genanvendelige ‚Äúopskrifter‚Äù",
    "text": "Funktioner: Genanvendelige ‚Äúopskrifter‚Äù\nDefination af funktioner svarer til at l√¶re maskinen en ny ‚Äúkommando‚Äù. Nu kan vi sige beregn_moms(tal) og maskinen ved pr√¶cist, hvad den skal g√∏re, fordi vi har defineret hver eneste trin.\n\n\ndef beregn_moms(pris, moms_sats=0.25):\n    return pris * moms_sats"
  },
  {
    "objectID": "index.html#den-fundamentale-erkendelse-om-maskiner",
    "href": "index.html#den-fundamentale-erkendelse-om-maskiner",
    "title": "F√∏rste m√∏de med Python og UCloud",
    "section": "Den fundamentale erkendelse om maskiner",
    "text": "Den fundamentale erkendelse om maskiner\nMaskiner er utroligt dumme men utroligt hurtige og p√•lidelige. De kan kun g√∏re simple ting som:\n\nGemme tal\nSammenligne v√¶rdier\nHoppe til forskellige dele af koden\nGentage instruktioner\n\nMen de kan g√∏re disse simple ting milliarder af gange per sekund uden fejl.\n\nKodningens kunst ligger i at bryde komplekse menneskelige problemer ned til disse simple operationer og derefter komponere dem sammen til kraftfulde l√∏sninger."
  },
  {
    "objectID": "index.html#computational-social-science",
    "href": "index.html#computational-social-science",
    "title": "F√∏rste m√∏de med Python og UCloud",
    "section": "Computational Social Science",
    "text": "Computational Social Science\nEks.: Digitale metoder til kriminalitetsforst√•else\nVi flytter fra sm√•, lokale unders√∏gelser til analyser af massive datas√¶t der kan afsl√∏re m√∏nstre, vi aldrig kunne se f√∏r.\n\n\nTraditionel tilgang: En kriminolog interviewer 50 tidligere indsatte over 6 m√•neder for at forst√• recidiv-m√∏nstre.\nComputational tilgang: Analyser alle \\(n\\) millioner straffesager fra de sidste 20 √•r og identificer risikofaktorer for tilbagefald.\n\n\n\n\n# Find tilbagefalds-m√∏nstre i nationale registre\nurl = \"https://tinyurl.com/3ja8pcfv\"\n\nrecidiv_data = pd.read_csv(url)\n\nrisiko_faktorer = recidiv_data.groupby(['krimtype', 'tidligere_domme']).agg({\n    'dage_til_tilbagefald': 'median'\n})\n\nprint(risiko_faktorer)"
  },
  {
    "objectID": "index.html#spatial-kriminologi-n√•r-kriminalitet-data-f√•r-koordinater",
    "href": "index.html#spatial-kriminologi-n√•r-kriminalitet-data-f√•r-koordinater",
    "title": "F√∏rste m√∏de med Python og UCloud",
    "section": "Spatial kriminologi: N√•r kriminalitet [data] f√•r koordinater",
    "text": "Spatial kriminologi: N√•r kriminalitet [data] f√•r koordinater\n\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import DBSCAN\nfrom io import StringIO\n\nurl = \"https://tinyurl.com/4r8tj95v\"\ncrime_data = pd.read_csv(url)  \n\ncoords = crime_data[['latitude', 'longitude']]\nclusters = DBSCAN(eps=0.005, min_samples=2).fit(coords)\n\n# Visualiser p√• kort\nfig, ax = plt.subplots(figsize=(12, 8))\n\nscatter = ax.scatter(crime_data['longitude'], crime_data['latitude'], \n                    c=clusters.labels_, \n                    cmap='viridis', \n                    alpha=0.7, \n                    s=60, \n                    edgecolors='black', \n                    linewidth=0.5)\n\nax.set_xlabel('Longitude')\nax.set_ylabel('Latitude')\nax.set_title('K√∏benhavn Kriminalitets Hot Spots\\n(Farver viser clusters)')\nax.grid(True, alpha=0.3)\n\n# Tilf√∏j colorbar\ncbar = plt.colorbar(scatter)\ncbar.set_label('Cluster ID (-1 = st√∏j/outliers)')\n\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "index.html#predictive-policing-algoritmer-der-forudsiger-data-kriminalitet",
    "href": "index.html#predictive-policing-algoritmer-der-forudsiger-data-kriminalitet",
    "title": "F√∏rste m√∏de med Python og UCloud",
    "section": "Predictive Policing: Algoritmer der forudsiger [data] kriminalitet",
    "text": "Predictive Policing: Algoritmer der forudsiger [data] kriminalitet\n\n\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Features: vejr, tid, lokation, historiske data\nfeatures = ['temperature', 'hour', 'day_of_week', 'previous_crimes_30days', \n           'unemployment_rate', 'distance_to_school']\n\n# Train model til at forudsige risiko for kriminalitet\nmodel = RandomForestClassifier(n_estimators=100)\nmodel.fit(historical_data[features], historical_data['crime_occurred'])\n\n# Forudsig risiko for i morgen\ntomorrow_risk = model.predict_proba(tomorrow_data[features])\nhigh_risk_areas = tomorrow_data[tomorrow_risk[:, 1] &gt; 0.7]"
  },
  {
    "objectID": "index.html#cloud-computing-and-hpc",
    "href": "index.html#cloud-computing-and-hpc",
    "title": "F√∏rste m√∏de med Python og UCloud",
    "section": "Cloud computing and HPC",
    "text": "Cloud computing and HPC\n\nHPC: At bruge mange kraftige computere, som er koblet sammen i store klynger (clusters), til at l√∏se komplekse og kr√¶vende opgaver.\nCloud computing: Adgang til computerressourcer (fx programmer, lagerplads og regnekraft) via internettet, fremfor at have det hele installeret p√• sin egen computer.\nUCloud: En dansk platform udviklet af Syddansk Universitet (SDU) og Aalborg Universitet (AAU). Den g√∏r det muligt for forskere, undervisere og studerende at udnytte HPC-ressourcer p√• en enkel m√•de.\n\nK√∏re programmer uden installation: UCloud tilbyder et bibliotek af applikationer (fx RStudio, Jupyter Notebooks, MATLAB, Stata, Python, osv.), som kan startes direkte i browseren.\nBrug HPC-ressourcer: N√•r du starter en applikation, v√¶lger du selv hvor meget regnekraft (CPU, GPU, RAM) du har brug for. Du arbejder stadig i en browser, men beregningen sker p√• en HPC-klynge.\nDatah√•ndtering: Du kan uploade, downloade og organisere dine data direkte i UCloud. Der er ogs√• muligheder for sikker deling af data med kolleger.\nSamarbejde: Projekter i UCloud kan deles med andre brugere, s√• man kan arbejde p√• de samme data og applikationer."
  },
  {
    "objectID": "index.html#ucloud-i-praksis",
    "href": "index.html#ucloud-i-praksis",
    "title": "F√∏rste m√∏de med Python og UCloud",
    "section": "UCLoud i praksis",
    "text": "UCLoud i praksis\n\nLog ind med WAYF (din universitetslogin).\nV√¶lg et projekt: Al arbejde i UCloud foreg√•r i projekter, hvor du kan organisere applikationer, data og brugere.\nStart en applikation: Fx Jupyter, og v√¶lg hvor meget regnekraft du skal bruge.\nArbejd som normalt i applikationen, men med adgang til langt kraftigere ressourcer end din egen computer.\nGem og del resultater: alt bliver gemt i dit projekt, og kan deles med andre eller eksporteres til lokal computer."
  }
]