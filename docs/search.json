[
  {
    "objectID": "index.html#kodning",
    "href": "index.html#kodning",
    "title": "F√∏rste m√∏de med Python og UCloud",
    "section": "Kodning?! üêç",
    "text": "Kodning?! üêç\n\nHvad er jeres erfaring (hvis I har nogen)?\nHvordan forst√•r i ‚Äúkodning‚Äù; hvorfor bruger vi ikke bare Excel eller lign.?\nHvis I har erfaring; er det en god erfaring? Hvordan l√¶rte i det bedst; hvad var sv√¶rt?"
  },
  {
    "objectID": "index.html#kodning-vs.-excel",
    "href": "index.html#kodning-vs.-excel",
    "title": "F√∏rste m√∏de med Python og UCloud",
    "section": "‚ÄúKodning‚Äù vs.¬†Excel",
    "text": "‚ÄúKodning‚Äù vs.¬†Excel\nReproducerbar, skalerbar, fleksibel og automatisering!\nN√•r Excel kommer til kort:\n\nAnalysere 100.000-vis af r√¶kker data\nGentage den samme analyse hver [dag/m√•ned/√•r] med nye data\n\nI Excel [eller lign.], hvis data √¶ndrer sig, skal du gentage alle klik.\n\nDokumentere pr√¶cist, hvad du har gjort, s√• en kollega kan gentage det\nKombinere data fra [mange] forskellige kilder\nLave avancerede statistiske modeller"
  },
  {
    "objectID": "index.html#python-et-kodesprog",
    "href": "index.html#python-et-kodesprog",
    "title": "F√∏rste m√∏de med Python og UCloud",
    "section": "Python; et kodesprog",
    "text": "Python; et kodesprog\n\nT√¶nk p√• kodning som et meget detaljeret opskrift. S√• fremfor en abstract ‚Äúbland ingredienserne‚Äù (Excel; peg-og-klik), skriver vi:\n\n\nimport pandas as pd\n\n# Hent data fra URL\nfrom io import StringIO\nurl = \"https://raw.githubusercontent.com/jeppeFQ/sds1-lektion-1/refs/heads/master/resources/sales_data.csv\"\n\ndata = pd.read_csv(StringIO(csv_data))\n\n# Beregn gennemsnit for hver m√•ned\nmonthly_average = data.groupby('month')['sales'].mean()\nprint(\"\\nM√•nedlige gennemsnit:\")\nprint(monthly_average)"
  },
  {
    "objectID": "index.html#reproducerbar",
    "href": "index.html#reproducerbar",
    "title": "F√∏rste m√∏de med Python og UCloud",
    "section": "Reproducerbar",
    "text": "Reproducerbar\n\nHvordan fik du resultatet?\n\nmonthly_average = data.groupby('month')['sales'].mean()\nAlle trin i koden er en komplet log over hvad du har gjort ved dataen for at f√• dit output. N√•r n√¶ste √•rs data kommer, √¶ndres blot url = \"https://....\" til den nye data og det hele k√∏res igen."
  },
  {
    "objectID": "index.html#skalerbarhed",
    "href": "index.html#skalerbarhed",
    "title": "F√∏rste m√∏de med Python og UCloud",
    "section": "Skalerbarhed",
    "text": "Skalerbarhed\nDen samme kode, der arbejder med 100 r√¶kker, kan h√•ndtere 1 million r√¶kker uden problemer."
  },
  {
    "objectID": "index.html#fleksibilitet",
    "href": "index.html#fleksibilitet",
    "title": "F√∏rste m√∏de med Python og UCloud",
    "section": "Fleksibilitet",
    "text": "Fleksibilitet\nPython har tusindvis af specialiserede ‚Äúv√¶rkt√∏jskasser‚Äù (biblioteker) til alt fra grundl√¶ggende statistik og datah√•ndtering til kunstig intelligens."
  },
  {
    "objectID": "index.html#automatisering",
    "href": "index.html#automatisering",
    "title": "F√∏rste m√∏de med Python og UCloud",
    "section": "Automatisering",
    "text": "Automatisering\nSkriv koden √©n gang, k√∏r den hver dag/uge/m√•ned/√•r automatisk."
  },
  {
    "objectID": "index.html#kodning-kommunikation-med-maskinen",
    "href": "index.html#kodning-kommunikation-med-maskinen",
    "title": "F√∏rste m√∏de med Python og UCloud",
    "section": "Kodning: Kommunikation med maskinen",
    "text": "Kodning: Kommunikation med maskinen\n\nKodning skal v√¶re utvetydigt og logisk struktureret\nI skal p√• kurset oparbejde en algoritmisk t√¶nkning.\n\nDekomposition: Bryde komplekse problemer ned i mindre, h√•ndterbare dele\nM√∏nstergenkendelse: Identificere ligheder p√• tv√¶rs af forskellige problemer\nAbstraktion: Fokusere p√• de v√¶sentlige aspekter og ignorere irrelevante detaljer\nAlgoritmedesign: Step-by-step l√∏sninger der kan automatiseres"
  },
  {
    "objectID": "index.html#hvorfor-python",
    "href": "index.html#hvorfor-python",
    "title": "F√∏rste m√∏de med Python og UCloud",
    "section": "Hvorfor Python üêç",
    "text": "Hvorfor Python üêç\n\n(Relativt) simpelt.\nStor brugerbase.\nOmfattende biblioteker til alle forskningsomr√•der."
  },
  {
    "objectID": "index.html#python-tanke-til-handling",
    "href": "index.html#python-tanke-til-handling",
    "title": "F√∏rste m√∏de med Python og UCloud",
    "section": "Python: Tanke til handling",
    "text": "Python: Tanke til handling"
  },
  {
    "objectID": "index.html#niveau-1-menneskelig-tanke",
    "href": "index.html#niveau-1-menneskelig-tanke",
    "title": "F√∏rste m√∏de med Python og UCloud",
    "section": "Niveau 1: Menneskelig tanke",
    "text": "Niveau 1: Menneskelig tanke\n‚ÄúJeg vil gerne finde gennemsnittet af mine salgstal‚Äù"
  },
  {
    "objectID": "index.html#niveau-2-algoritmisk-t√¶nkning",
    "href": "index.html#niveau-2-algoritmisk-t√¶nkning",
    "title": "F√∏rste m√∏de med Python og UCloud",
    "section": "Niveau 2: Algoritmisk t√¶nkning",
    "text": "Niveau 2: Algoritmisk t√¶nkning\n‚ÄúL√¶g alle tallene sammen, divider med antallet af tal‚Äù\n\\[\n\\bar{x} = \\frac{x_1 + x_2 + x_3 + \\ldots + x_n}{n} = \\frac{\\sum_{i=1}^{n} x_i}{n}\n\\]"
  },
  {
    "objectID": "index.html#niveau-3-python-kode",
    "href": "index.html#niveau-3-python-kode",
    "title": "F√∏rste m√∏de med Python og UCloud",
    "section": "Niveau 3: Python-kode",
    "text": "Niveau 3: Python-kode\n\n\ntotal = sum(data['sales'])  \n\ngennemsnit = total / len(data['sales'])\n\nprint(f\"Total salg: {total}\")\nprint(f\"Gennemsnit: {gennemsnit}\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\(\\text{total} = \\sum_{i=1}^{n} \\text{sales}_i\\)\n\\(\\text{gennemsnit} = \\frac{\\text{total}}{n} = \\frac{\\sum_{i=1}^{n} \\text{sales}_i}{n}\\)\n\nHvor \\(n\\) er antallet af salgstal i datas√¶ttet."
  },
  {
    "objectID": "index.html#niveau-4-maskinsprog",
    "href": "index.html#niveau-4-maskinsprog",
    "title": "F√∏rste m√∏de med Python og UCloud",
    "section": "Niveau 4: Maskinsprog",
    "text": "Niveau 4: Maskinsprog\nLOAD data\nADD all values\nDIVIDE by count\nSTORE result"
  },
  {
    "objectID": "index.html#pr√¶cise-instrukser",
    "href": "index.html#pr√¶cise-instrukser",
    "title": "F√∏rste m√∏de med Python og UCloud",
    "section": "Pr√¶cise instrukser",
    "text": "Pr√¶cise instrukser\n\nHvilke salg er st√∏rre end 10.000 (DKK)?\n\n\nTag f√∏rste tal fra listen\nEr det st√∏rre end 10000? Hvis ja, print det\nTag n√¶ste tal\nGentag indtil listen er tom"
  },
  {
    "objectID": "index.html#variable-og-pythons-hukommelse",
    "href": "index.html#variable-og-pythons-hukommelse",
    "title": "F√∏rste m√∏de med Python og UCloud",
    "section": "Variable og Pythons hukommelse",
    "text": "Variable og Pythons hukommelse\ndata har virket flere steder i vores kode, selvom vi kun har indl√¶st den √©n gang.\n\n\npris = 100\n\nmoms = pris * 0.25\n\ntotal = pris + moms\n\nprint(total)"
  },
  {
    "objectID": "index.html#funktioner-genanvendelige-opskrifter",
    "href": "index.html#funktioner-genanvendelige-opskrifter",
    "title": "F√∏rste m√∏de med Python og UCloud",
    "section": "Funktioner: Genanvendelige ‚Äúopskrifter‚Äù",
    "text": "Funktioner: Genanvendelige ‚Äúopskrifter‚Äù\nDefination af funktioner svarer til at l√¶re maskinen en ny ‚Äúkommando‚Äù. Nu kan vi sige beregn_moms(100) og maskinen ved pr√¶cist, hvad den skal g√∏re, fordi vi har defineret hver eneste trin.\n\n\ndef beregn_moms(pris, moms_sats=0.25):\n    return pris * moms_sats"
  },
  {
    "objectID": "index.html#den-fundamentale-erkendelse-om-maskiner",
    "href": "index.html#den-fundamentale-erkendelse-om-maskiner",
    "title": "F√∏rste m√∏de med Python og UCloud",
    "section": "Den fundamentale erkendelse om maskiner",
    "text": "Den fundamentale erkendelse om maskiner\nMaskiner er utroligt dumme men utroligt hurtige og p√•lidelige. De kan kun g√∏re simple ting som:\n\nGemme tal\nSammenligne v√¶rdier\nHoppe til forskellige dele af koden\nGentage instruktioner\n\nMen de kan g√∏re disse simple ting milliarder af gange per sekund uden fejl.\nKodningens kunst ligger i at bryde komplekse menneskelige problemer ned til disse simple operationer og derefter komponere dem sammen til kraftfulde l√∏sninger."
  },
  {
    "objectID": "index.html#computational-social-science-digitale-metoder-til-kriminalitetsforst√•else",
    "href": "index.html#computational-social-science-digitale-metoder-til-kriminalitetsforst√•else",
    "title": "F√∏rste m√∏de med Python og UCloud",
    "section": "Computational Social Science (Digitale metoder til kriminalitetsforst√•else)",
    "text": "Computational Social Science (Digitale metoder til kriminalitetsforst√•else)\nVi flytter fra sm√•, lokale unders√∏gelser til analyser af massive datas√¶t der kan afsl√∏re m√∏nstre, vi aldrig kunne se f√∏r.\n\n\nTraditionel tilgang: En kriminolog interviewer 50 tidligere indsatte over 6 m√•neder for at forst√• recidiv-m√∏nstre.\nComputational tilgang: Analyser alle \\(n\\) millioner straffesager fra de sidste 20 √•r og identificer pr√¶cise risikofaktorer for tilbagefald.\n\n\n\n\n# Find recidiv-m√∏nstre i nationale registre\nurl = \"https://raw.githubusercontent.com/jeppeFQ/sds1-lektion-1/refs/heads/master/resources/straffesager_1990_2024.csv\"\n\nrecidiv_data = pd.read_csv(url)\n\nrisiko_faktorer = recidiv_data.groupby(['krimtype', 'tidligere_domme']).agg({\n    'dage_til_tilbagefald': 'median'\n})\n\nprint(risiko_faktorer)"
  },
  {
    "objectID": "index.html#spatial-kriminologi-n√•r-kriminalitet-data-f√•r-koordinater",
    "href": "index.html#spatial-kriminologi-n√•r-kriminalitet-data-f√•r-koordinater",
    "title": "F√∏rste m√∏de med Python og UCloud",
    "section": "Spatial kriminologi: N√•r kriminalitet [data] f√•r koordinater",
    "text": "Spatial kriminologi: N√•r kriminalitet [data] f√•r koordinater\n\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import DBSCAN\nfrom io import StringIO\n\nurl = \"https://raw.githubusercontent.com/jeppeFQ/sds1-lektion-1/refs/heads/master/resources/copenhagen_crime_2024.csv\"\ncrime_data = pd.read_csv(url)  \n\ncoords = crime_data[['latitude', 'longitude']]\nclusters = DBSCAN(eps=0.005, min_samples=2).fit(coords)\n\n# Visualiser p√• kort\nfig, ax = plt.subplots(figsize=(12, 8))\n\nscatter = ax.scatter(crime_data['longitude'], crime_data['latitude'], \n                    c=clusters.labels_, cmap='viridis', \n                    alpha=0.7, s=60, edgecolors='black', linewidth=0.5)\n\nax.set_xlabel('Longitude')\nax.set_ylabel('Latitude')\nax.set_title('K√∏benhavn Kriminalitets Hot Spots\\n(Farver viser clusters)')\nax.grid(True, alpha=0.3)\n\n# Tilf√∏j colorbar\ncbar = plt.colorbar(scatter)\ncbar.set_label('Cluster ID (-1 = st√∏j/outliers)')\n\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "index.html#netv√¶rksanalyse-kriminelle-organisationer-data-som-grafer",
    "href": "index.html#netv√¶rksanalyse-kriminelle-organisationer-data-som-grafer",
    "title": "F√∏rste m√∏de med Python og UCloud",
    "section": "Netv√¶rksanalyse: Kriminelle organisationer [data] som grafer",
    "text": "Netv√¶rksanalyse: Kriminelle organisationer [data] som grafer\n\n\nimport networkx as nx\n\n# Byg netv√¶rk af kriminelle forbindelser\nG = nx.Graph()\nfor _, row in arrest_data.iterrows():\n    G.add_edge(row['person1'], row['person2'], \n               weight=row['co_arrests'])\n\n# Find centrale figurer i netv√¶rket\ncentrality = nx.betweenness_centrality(G)\nkey_players = sorted(centrality.items(), \n                    key=lambda x: x[1], reverse=True)[:10]\n\n# Simuler effekt af at arrestere n√∏glepersoner\noriginal_components = nx.number_connected_components(G)\nG.remove_nodes_from([player[0] for player in key_players[:3]])\nnew_components = nx.number_connected_components(G)"
  },
  {
    "objectID": "index.html#predictive-policing-algoritmer-der-forudsiger-data-kriminalitet",
    "href": "index.html#predictive-policing-algoritmer-der-forudsiger-data-kriminalitet",
    "title": "F√∏rste m√∏de med Python og UCloud",
    "section": "Predictive Policing: Algoritmer der forudsiger [data] kriminalitet",
    "text": "Predictive Policing: Algoritmer der forudsiger [data] kriminalitet\n\n\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Features: vejr, tid, lokation, historiske data\nfeatures = ['temperature', 'hour', 'day_of_week', 'previous_crimes_30days', \n           'unemployment_rate', 'distance_to_school']\n\n# Train model til at forudsige risiko for kriminalitet\nmodel = RandomForestClassifier(n_estimators=100)\nmodel.fit(historical_data[features], historical_data['crime_occurred'])\n\n# Forudsig risiko for i morgen\ntomorrow_risk = model.predict_proba(tomorrow_data[features])\nhigh_risk_areas = tomorrow_data[tomorrow_risk[:, 1] &gt; 0.7]"
  },
  {
    "objectID": "index.html#text-mining-analysere-millioner-af-text-politirapporter",
    "href": "index.html#text-mining-analysere-millioner-af-text-politirapporter",
    "title": "F√∏rste m√∏de med Python og UCloud",
    "section": "Text Mining: Analysere millioner af [text] politirapporter",
    "text": "Text Mining: Analysere millioner af [text] politirapporter\n\n\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.cluster import KMeans\n\n# Indl√¶s 500,000 politirapporter\nreports = pd.read_csv(\"police_reports_2020_2024.csv\")\n\n# Identificer m√∏nstre i rapporttekster\nvectorizer = TfidfVectorizer(max_features=1000, stop_words='danish')\ntext_vectors = vectorizer.fit_transform(reports['report_text'])\n\n# Cluster lignende kriminalitetstyper\nkmeans = KMeans(n_clusters=15)\nclusters = kmeans.fit_predict(text_vectors)\n\n# Find mest karakteristiske ord for hver cluster\nfeature_names = vectorizer.get_feature_names_out()\nfor i in range(15):\n    cluster_center = kmeans.cluster_centers_[i]\n    top_words = [feature_names[j] for j in cluster_center.argsort()[-10:]]\n    print(f\"Cluster {i}: {', '.join(top_words)}\")"
  },
  {
    "objectID": "index.html#de-store-sp√∏rgsm√•l-etik-og-bias",
    "href": "index.html#de-store-sp√∏rgsm√•l-etik-og-bias",
    "title": "F√∏rste m√∏de med Python og UCloud",
    "section": "De store sp√∏rgsm√•l: Etik og bias",
    "text": "De store sp√∏rgsm√•l: Etik og bias"
  },
  {
    "objectID": "index.html#section",
    "href": "index.html#section",
    "title": "F√∏rste m√∏de med Python og UCloud",
    "section": "1",
    "text": "1"
  }
]