{"title":"F칮rste m칮de med Python og UCloud","markdown":{"yaml":{"title":"F칮rste m칮de med Python og UCloud","subtitle":"","author":"Jeppe Fjeldgaard Qvist","date":"today","format":{"revealjs":{"include-after-body":"/Users/jeppefl/Library/CloudStorage/OneDrive-AalborgUniversitet/01_work/undervisning/udvikling-it/slides/lektion-1/resources/timer.html","slide-number":"c","show-slide-number":"print","embed-resources":true,"self-contained-math":true,"smaller":true,"scrollable":true,"theme":"default","include-in-header":[{"text":"<script src=\"https://cdn.jsdelivr.net/pyodide/v0.26.4/full/pyodide.js\"></script>\n<link rel=\"stylesheet\" href=\"resources/pyodide-styles.css\">\n<script src=\"resources/pyodide-setup.js\"></script>\n"}]}}},"headingText":"Kodning?! 游냀","containsRefs":false,"markdown":"\n\n\n- Hvad er jeres erfaring (hvis I har nogen)? \n\n- Hvordan forst친r i \"kodning\"; hvorfor bruger vi ikke bare Excel eller lign.? \n\n- Hvis I har erfaring; er det en god erfaring? Hvordan l칝rte i det bedst; hvad var sv칝rt? \n\n<span class=\"timer\" data-time=\"300\"></span>\n\n## \"Kodning\" vs. Excel \n\n### *Reproducerbar*, *skalerbar*, *fleksibel* og *automatisering*!\n\nN친r Excel kommer til kort: \n\n- Analysere 100.000-vis af r칝kker data.\n\n- Gentage den samme analyse hver [dag/m친ned/친r] med nye data.\n\n  - I Excel: hvis data 칝ndrer sig, skal vi gentage alle klik.\n\n- Dokumentere pr칝cist, hvad vi har gjort, s친 en kollega kan gentage det.\n\n- Kombinere data fra [mange] forskellige kilder.\n\n- Lave avancerede statistiske modeller.\n\n## Python; et kodesprog \n\n<span class=\"timer\" data-time=\"180\"></span>\n\nT칝nk p친 kodning som et *meget detaljeret* opskrift. S친 fremfor en abstract \"bland ingredienserne\" (Excel; peg-og-klik), skriver vi: \n\n<div class=\"code-container\">\n<div class=\"code-input\">\n<textarea class=\"python-editor\" id=\"code1\">\n\n# Hent biblioteker\nimport pandas as pd\nfrom io import StringIO\n\n# Hent data fra URL\nurl = \"https://tinyurl.com/3p843y7k\"\n\ndata = pd.read_csv(StringIO(csv_data))\n\n# Beregn gennemsnit for hver m친ned\nmonthly_average = data.groupby('month')['sales'].mean()\n\nprint(\"\\nM친nedlige gennemsnit:\")\nprint(monthly_average)\n\n</textarea>\n<button class=\"run-button\" onclick=\"runPython(document.getElementById('code1').value, 'output1')\">\n  <img src=\"resources/python-file.png\" alt=\"Python\" style=\"height: 50px;\">\n</button>\n<button class=\"reset-button\" onclick=\"resetPythonGlobals()\">\n  <img src=\"resources/dust.png\" alt=\"Python\" style=\"height: 50px;\">\n</button>\n</div>\n<div class=\"code-output\" id=\"output1\"></div>\n</div>\n\n\n\n## Reproducerbar\n\n> Hvordan fik du resultatet? \n\n`monthly_average = data.groupby('month')['sales'].mean()`\n\n<br><br>\n\n*Alle trin i koden er en komplet **log** over hvad du har gjort ved dataen for at f친 dit output*. \n\nN친r n칝ste 친rs data kommer, 칝ndres blot `url = \"https://....\"` til den nye data og det hele k칮res igen. \n\n## Skalerbarhed\n\n*Den samme kode, der arbejder med 100 r칝kker, kan h친ndtere millioner af r칝kker uden problemer.* \n\n<br><br>\n\nFlere r칝kker kr칝ver dog logisk nok mere computerkraft og tid. \n\n## Fleksibilitet\n\n*Python har tusindvis af specialiserede \"v칝rkt칮jskasser\" (biblioteker) til alt fra grundl칝ggende statistik og datah친ndtering til machine learning og kunstig intelligens.*\n\n## Automatisering \n\n*Skriv koden 칠n gang:* k칮r den hver dag/uge/m친ned/친r automatisk.\n\n## Kodning: *Kommunikation med maskinen* \n\nKodning skal v칝re *utvetydigt og logisk struktureret* for at maskinen \"forst친r\" os.\n\nI skal p친 kurset oparbejde en **algoritmisk t칝nkning**. \n\n---\n\n<span class=\"timer\" data-time=\"180\"></span>\n\n\n::: {.incremental}\n\n**Spg.:** Hvad t칝nker I n친r i h칮rer ordet *'Algoritme'*?\n\n- *Algoritmisk t칝nkning*:\n\n  - **Dekomposition**: Bryde komplekse problemer ned i mindre, h친ndterbare dele\n  - **M칮nstergenkendelse**: Identificere ligheder p친 tv칝rs af forskellige problemer\n  - **Abstraktion**: Fokusere p친 de v칝sentlige aspekter og ignorere irrelevante detaljer\n  - **Algoritmedesign**: Step-by-step l칮sninger der kan automatiseres\n\n:::\n\n## Hvorfor Python? 游냀\n\n- (Relativt) simpelt. \n\n- Stor brugerbase. \n\n- Omfattende biblioteker til alle forskningsomr친der.\n\n## Kodning af en tanke til handling i 4 niveauer\n\n## *Niveau 1*: Menneskelig tanke\n\n> \"Jeg vil finde gennemsnittet af mine salgstal\"\n\n## *Niveau 2*: Algoritmisk t칝nkning\n\n> \"L칝g alle tallene sammen, divider med antallet af tal\"\n\n<br><br><br><br>\n\n$$\n\\bar{x} = \\frac{x_1 + x_2 + x_3 + \\ldots + x_n}{n} = \\frac{\\sum_{i=1}^{n} x_i}{n}\n$$\n\n## *Niveau 3*: Python-kode\n\n<div class=\"code-container\">\n<div class=\"code-input\">\n<textarea class=\"python-editor\" id=\"code2\">\n\ntotal = sum(data['sales'])  \n\ngennemsnit = total / len(data['sales'])\n\nprint(f\"Total salg: {total}\")\nprint(f\"Gennemsnit: {gennemsnit}\")\n\n</textarea>\n<button class=\"run-button\" onclick=\"runPython(document.getElementById('code2').value, 'output2')\">\n  <img src=\"resources/python-file.png\" alt=\"Python\" style=\"height: 50px;\">\n</button>\n<button class=\"reset-button\" onclick=\"resetPythonGlobals()\">\n  <img src=\"resources/dust.png\" alt=\"Python\" style=\"height: 50px;\">\n</button>\n</div>\n<div class=\"code-output\" id=\"output2\"></div>\n</div>\n\n::: {.incremental}\n\nHvad har vi implementeret her: \n\n1. $\\text{total} = \\sum_{i=1}^{n} \\text{sales}_i$\n\n2. $\\text{gennemsnit} = \\frac{\\text{total}}{n} = \\frac{\\sum_{i=1}^{n} \\text{sales}_i}{n}$, Hvor $n$ er antallet af salgstal i datas칝ttet.\n\n3. Udskriv resultatet\n\n:::\n\n## *Niveau 4*: Maskinsprog \n\nMaskinen forst친r ikke `Python` (?!)\n\n- Computeren forst친r kun maskinkode. Dette er lav-niveau instruktioner best친ende af $1$-taller og $0$'er (binary), som **CPU**'en kan arbejde med.\n\n- **Python-fortolkeren** overs칝tter alts친 koden til noget som maskinen kan forst친; og Python er muligt at l칝se for mennesker. \n\n- Denne overs칝ttelse forg친r i en mellemform (assembly-sprog), der er **meget** mere besv칝rligt at arbejde med end Python. \n\n---\n\n**Process:**\n\nH칮j-niveau: \n\n```\ntotal = sum(data)  \ngennemsnit = total / len(data)\n```\n\nMellem-niveau: \n\n```\nLOAD data\nADD all values\nDIVIDE by count\nSTORE result\n```\n\nLav-niveau: \n\n```\n10110000 01100001\n```\n\n## Pr칝cision er n칮glen! \n\n> \"Kan du hente en kop kaffen?\" \n\nVi forst친r implicit: **G친 ud i k칮kkenet, tag en kop, h칝ld kaffe i koppen, kom tilbage**.\n\nOversat til eksplicitte instruktioner:\n\n::: {.incremental}\n\n1. `cup = get_cup_from_kitchen()`\n2. `coffee = pour_coffee(cup)`\n3. `return coffee_to_desk(cup)`\n\n:::\n\n## Pr칝cise instrukser \n\n> Hvilke salg er st칮rre end 10.000 (DKK)?\n\n1. Tag f칮rste tal fra listen\n2. Er det st칮rre end 10.000? Hvis ja, print det\n3. Tag n칝ste tal\n4. Gentag (2)\n5. Gentag 1-4 indtil listen er tom\n\n---\n\n\n<div class=\"code-container\">\n<div class=\"code-input\">\n<textarea class=\"python-editor\" id=\"code1.1\">\n\nfor tal in data['sales']:\n    if tal > 10000:\n        print(\"H칮jt salg:\", tal)\n\n</textarea>\n<button class=\"run-button\" onclick=\"runPython(document.getElementById('code1.1').value, 'output1.1')\">\n  <img src=\"resources/python-file.png\" alt=\"Python\" style=\"height: 50px;\">\n</button>\n<button class=\"reset-button\" onclick=\"resetPythonGlobals()\">\n  <img src=\"resources/dust.png\" alt=\"Python\" style=\"height: 50px;\">\n</button>\n</div>\n<div class=\"code-output\" id=\"output1.1\"></div>\n</div>\n\n$$\n\\begin{aligned}\n\\textbf{for hvert } \\text{tal} ~ i ~ \\text{salgstal}: \\\\\n\\quad \\textbf{hvis } \\text{tal} ~st칮rre~end~ 10000: \\\\\n\\qquad \\textbf{udskriv} ~ \\text{tal} ~~\n\\end{aligned}\n$$\n\n## Variable og Pythons *hukommelse* \n\n**Bem칝rk**: `data` har virket flere steder i vores kode, selvom vi kun har indl칝st den 칠n gang. \n\n<div class=\"code-container\">\n<div class=\"code-input\">\n<textarea class=\"python-editor\" id=\"code3\">\n\npris = 100\n\nmoms = pris * 0.25\n\ntotal = pris + moms\n\nprint(total)\n\n</textarea>\n<button class=\"run-button\" onclick=\"runPython(document.getElementById('code3').value, 'output3')\">\n  <img src=\"resources/python-file.png\" alt=\"Python\" style=\"height: 50px;\">\n</button>\n<button class=\"reset-button\" onclick=\"resetPythonGlobals()\">\n  <img src=\"resources/dust.png\" alt=\"Python\" style=\"height: 50px;\">\n</button>\n</div>\n<div class=\"code-output\" id=\"output3\"></div>\n</div>\n\n---\n\n<br><br>\n\n```\npris = 100\n\nmoms = pris * 0.25\n\ntotal = pris + moms\n\nprint(total)\n```\n\n<br>\n\n1. Tag v칝rdien 100 og gem det i **hukommelseslokation** kaldet 'pris'\n\n2. Tag v칝rdien fra 'pris', gang med 0.25, gem resultatet som 'moms'\n\nMaskinen er ligeglad med om navne giver mening. Vi bruger **meningsfulde navne** for at forst친 vores egen kode. \n\n## Funktioner: Genanvendelige \"opskrifter\"\n\n**Defination af funktioner** svarer til at l칝re maskinen en ny \"kommando\". Nu kan vi sige `beregn_moms(tal)` og maskinen ved pr칝cist, hvad den skal g칮re, fordi vi har defineret hver eneste trin.\n\n<div class=\"code-container\">\n<div class=\"code-input\">\n<textarea class=\"python-editor\" id=\"code4\">\n\ndef beregn_moms(pris, moms_sats=0.25):\n    return pris * moms_sats\n\n</textarea>\n<button class=\"run-button\" onclick=\"runPython(document.getElementById('code4').value, 'output4')\">\n  <img src=\"resources/python-file.png\" alt=\"Python\" style=\"height: 50px;\">\n</button>\n<button class=\"reset-button\" onclick=\"resetPythonGlobals()\">\n  <img src=\"resources/dust.png\" alt=\"Python\" style=\"height: 50px;\">\n</button>\n</div>\n<div class=\"code-output\" id=\"output4\"></div>\n</div>\n\n---\n\n<div class=\"code-container\">\n<div class=\"code-input\">\n<textarea class=\"python-editor\" id=\"code5\">\n\nprint(beregn_moms(12485))\n\nprint(beregn_moms(12485, moms_sats=0.12))\n\n</textarea>\n<button class=\"run-button\" onclick=\"runPython(document.getElementById('code5').value, 'output5')\">\n  <img src=\"resources/python-file.png\" alt=\"Python\" style=\"height: 50px;\">\n</button>\n<button class=\"reset-button\" onclick=\"resetPythonGlobals()\">\n  <img src=\"resources/dust.png\" alt=\"Python\" style=\"height: 50px;\">\n</button>\n</div>\n<div class=\"code-output\" id=\"output5\"></div>\n</div>\n\n## Den fundamentale erkendelse om maskiner \n\nMaskiner er utroligt dumme men **utroligt hurtige og p친lidelige**. De kan kun g칮re simple ting som:\n\n- Gemme tal\n- Sammenligne v칝rdier\n- Hoppe til forskellige dele af koden\n- Gentage instruktioner\n\nMen de kan g칮re disse simple ting milliarder af gange per sekund uden fejl.\n\n> **Kodningens kunst** ligger i at bryde komplekse menneskelige problemer ned til disse simple operationer og derefter komponere dem sammen til kraftfulde l칮sninger.\n\n## *Computational Social Science* \n\nEks.: *Digitale metoder til kriminalitetsforst친else*\n\nAnalytisk g친r vi g친r fra **sm친, lokale unders칮gelser** til analyser af **massive datas칝t** der kan afsl칮re m칮nstre, vi aldrig kunne have set med traditionelle metoder.\n\n::: {style=\"font-size: 0.7em;\"}\n\n- **Traditionel tilgang**: En kriminolog interviewer 50 tidligere indsatte over 6 m친neder for at forst친 tilbagefald-m칮nstre.\n\n- **Computational tilgang**: Analyser alle $n$ millioner straffesager fra de sidste 20 친r og identificer risikofaktorer for tilbagefald.\n\n:::\n\n<div class=\"code-container\">\n<div class=\"code-input\">\n<textarea class=\"python-editor\" id=\"code6\">\n\n# Find tilbagefalds-m칮nstre i nationale registre\nurl = \"https://tinyurl.com/3ja8pcfv\"\n\nrecidiv_data = pd.read_csv(url)\n\nrisiko_faktorer = recidiv_data.groupby(['krimtype', 'tidligere_domme']).agg({\n    'dage_til_tilbagefald': 'median'\n})\n\nprint(risiko_faktorer)\n\n</textarea>\n<button class=\"run-button\" onclick=\"runPython(document.getElementById('code6').value, 'output6')\">\n  <img src=\"resources/python-file.png\" alt=\"Python\" style=\"height: 50px;\">\n</button>\n<button class=\"reset-button\" onclick=\"resetPythonGlobals()\">\n  <img src=\"resources/dust.png\" alt=\"Python\" style=\"height: 50px;\">\n</button>\n</div>\n<div class=\"code-output\" id=\"output6\"></div>\n</div>\n\n## *Spatial* kriminologi: N친r kriminalitet [data] f친r koordinater\n\n<div class=\"code-container\">\n<div class=\"code-input\">\n<textarea class=\"python-editor\" id=\"code7\">\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import DBSCAN\nfrom io import StringIO\n\nurl = \"https://tinyurl.com/4r8tj95v\"\ncrime_data = pd.read_csv(url)  \n\ncoords = crime_data[['latitude', 'longitude']]\nclusters = DBSCAN(eps=0.005, min_samples=2).fit(coords)\n\n# Visualiser p친 kort\nfig, ax = plt.subplots(figsize=(12, 8))\n\nscatter = ax.scatter(crime_data['longitude'], crime_data['latitude'], \n                    c=clusters.labels_, \n                    cmap='viridis', \n                    alpha=0.7, \n                    s=60, \n                    edgecolors='black', \n                    linewidth=0.5)\n\nax.set_xlabel('Longitude')\nax.set_ylabel('Latitude')\nax.set_title('Kriminalitets Hot Spots\\n(Farver viser clusters)')\nax.grid(True, alpha=0.3)\n\n# Tilf칮j colorbar\ncbar = plt.colorbar(scatter)\ncbar.set_label('Cluster ID (-1 = st칮j/outliers)')\n\nplt.tight_layout()\nplt.show()\n\n</textarea>\n<button class=\"run-button\" onclick=\"runPython(document.getElementById('code7').value, 'output7')\">\n  <img src=\"resources/python-file.png\" alt=\"Python\" style=\"height: 50px;\">\n</button>\n<button class=\"reset-button\" onclick=\"resetPythonGlobals()\">\n  <img src=\"resources/dust.png\" alt=\"Python\" style=\"height: 50px;\">\n</button>\n</div>\n<div class=\"code-output\" id=\"output7\"></div>\n</div>\n\n# Arbejde [med Python] i UCloud \n\n## Cloud computing and HPC \n\n- **HPC**: At bruge mange kraftige computere, som er koblet sammen i store klynger (clusters), til at l칮se komplekse og kr칝vende opgaver.\n\n- **Cloud computing**: Adgang til computerressourcer (fx programmer, lagerplads og regnekraft) via internettet, fremfor at have det hele installeret p친 sin egen computer.\n\n- **UCloud**: En dansk platform udviklet af Syddansk Universitet (SDU) og Aalborg Universitet (AAU). Den g칮r det muligt for forskere, undervisere og studerende at udnytte HPC-ressourcer p친 en enkel m친de.\n\n::: {style=\"font-size: 0.7em;\"}\n\n  - **K칮re programmer uden installation**: UCloud tilbyder et bibliotek af applikationer (fx RStudio, Jupyter Notebooks, MATLAB, Stata, Python, osv.), som kan startes direkte i browseren.\n\n  - **Brug HPC-ressourcer:** N친r du starter en applikation, v칝lger du selv hvor meget regnekraft (CPU, GPU, RAM) du har brug for. Du arbejder stadig i en browser, men beregningen sker p친 en HPC-klynge.\n\n  - **Datah친ndtering**: Du kan uploade, downloade og organisere dine data direkte i UCloud. Der er ogs친 muligheder for sikker deling af data med kolleger.\n\n  - **Samarbejde**: Projekter i UCloud kan deles med andre brugere, s친 man kan arbejde p친 de samme data og applikationer.\n\n::: \n\n## UCloud i praksis\n\n1. **Log ind** med WAYF (universitetslogin).\n\n2. **V칝lg et projekt**: Al arbejde i UCloud foreg친r i projekter, hvor du kan organisere applikationer, data og brugere.\n\n3. **Start en applikation**: Fx Jupyter, og v칝lg hvor meget regnekraft du skal bruge.\n\n4. Arbejd som normalt i applikationen, men med adgang til langt kraftigere ressourcer end din egen computer.\n\n5. Gem og del resultater: alt bliver gemt i dit projekt, og kan deles med andre eller eksporteres til lokal computer.","srcMarkdownNoYaml":"\n\n## Kodning?! 游냀\n\n- Hvad er jeres erfaring (hvis I har nogen)? \n\n- Hvordan forst친r i \"kodning\"; hvorfor bruger vi ikke bare Excel eller lign.? \n\n- Hvis I har erfaring; er det en god erfaring? Hvordan l칝rte i det bedst; hvad var sv칝rt? \n\n<span class=\"timer\" data-time=\"300\"></span>\n\n## \"Kodning\" vs. Excel \n\n### *Reproducerbar*, *skalerbar*, *fleksibel* og *automatisering*!\n\nN친r Excel kommer til kort: \n\n- Analysere 100.000-vis af r칝kker data.\n\n- Gentage den samme analyse hver [dag/m친ned/친r] med nye data.\n\n  - I Excel: hvis data 칝ndrer sig, skal vi gentage alle klik.\n\n- Dokumentere pr칝cist, hvad vi har gjort, s친 en kollega kan gentage det.\n\n- Kombinere data fra [mange] forskellige kilder.\n\n- Lave avancerede statistiske modeller.\n\n## Python; et kodesprog \n\n<span class=\"timer\" data-time=\"180\"></span>\n\nT칝nk p친 kodning som et *meget detaljeret* opskrift. S친 fremfor en abstract \"bland ingredienserne\" (Excel; peg-og-klik), skriver vi: \n\n<div class=\"code-container\">\n<div class=\"code-input\">\n<textarea class=\"python-editor\" id=\"code1\">\n\n# Hent biblioteker\nimport pandas as pd\nfrom io import StringIO\n\n# Hent data fra URL\nurl = \"https://tinyurl.com/3p843y7k\"\n\ndata = pd.read_csv(StringIO(csv_data))\n\n# Beregn gennemsnit for hver m친ned\nmonthly_average = data.groupby('month')['sales'].mean()\n\nprint(\"\\nM친nedlige gennemsnit:\")\nprint(monthly_average)\n\n</textarea>\n<button class=\"run-button\" onclick=\"runPython(document.getElementById('code1').value, 'output1')\">\n  <img src=\"resources/python-file.png\" alt=\"Python\" style=\"height: 50px;\">\n</button>\n<button class=\"reset-button\" onclick=\"resetPythonGlobals()\">\n  <img src=\"resources/dust.png\" alt=\"Python\" style=\"height: 50px;\">\n</button>\n</div>\n<div class=\"code-output\" id=\"output1\"></div>\n</div>\n\n\n\n## Reproducerbar\n\n> Hvordan fik du resultatet? \n\n`monthly_average = data.groupby('month')['sales'].mean()`\n\n<br><br>\n\n*Alle trin i koden er en komplet **log** over hvad du har gjort ved dataen for at f친 dit output*. \n\nN친r n칝ste 친rs data kommer, 칝ndres blot `url = \"https://....\"` til den nye data og det hele k칮res igen. \n\n## Skalerbarhed\n\n*Den samme kode, der arbejder med 100 r칝kker, kan h친ndtere millioner af r칝kker uden problemer.* \n\n<br><br>\n\nFlere r칝kker kr칝ver dog logisk nok mere computerkraft og tid. \n\n## Fleksibilitet\n\n*Python har tusindvis af specialiserede \"v칝rkt칮jskasser\" (biblioteker) til alt fra grundl칝ggende statistik og datah친ndtering til machine learning og kunstig intelligens.*\n\n## Automatisering \n\n*Skriv koden 칠n gang:* k칮r den hver dag/uge/m친ned/친r automatisk.\n\n## Kodning: *Kommunikation med maskinen* \n\nKodning skal v칝re *utvetydigt og logisk struktureret* for at maskinen \"forst친r\" os.\n\nI skal p친 kurset oparbejde en **algoritmisk t칝nkning**. \n\n---\n\n<span class=\"timer\" data-time=\"180\"></span>\n\n\n::: {.incremental}\n\n**Spg.:** Hvad t칝nker I n친r i h칮rer ordet *'Algoritme'*?\n\n- *Algoritmisk t칝nkning*:\n\n  - **Dekomposition**: Bryde komplekse problemer ned i mindre, h친ndterbare dele\n  - **M칮nstergenkendelse**: Identificere ligheder p친 tv칝rs af forskellige problemer\n  - **Abstraktion**: Fokusere p친 de v칝sentlige aspekter og ignorere irrelevante detaljer\n  - **Algoritmedesign**: Step-by-step l칮sninger der kan automatiseres\n\n:::\n\n## Hvorfor Python? 游냀\n\n- (Relativt) simpelt. \n\n- Stor brugerbase. \n\n- Omfattende biblioteker til alle forskningsomr친der.\n\n## Kodning af en tanke til handling i 4 niveauer\n\n## *Niveau 1*: Menneskelig tanke\n\n> \"Jeg vil finde gennemsnittet af mine salgstal\"\n\n## *Niveau 2*: Algoritmisk t칝nkning\n\n> \"L칝g alle tallene sammen, divider med antallet af tal\"\n\n<br><br><br><br>\n\n$$\n\\bar{x} = \\frac{x_1 + x_2 + x_3 + \\ldots + x_n}{n} = \\frac{\\sum_{i=1}^{n} x_i}{n}\n$$\n\n## *Niveau 3*: Python-kode\n\n<div class=\"code-container\">\n<div class=\"code-input\">\n<textarea class=\"python-editor\" id=\"code2\">\n\ntotal = sum(data['sales'])  \n\ngennemsnit = total / len(data['sales'])\n\nprint(f\"Total salg: {total}\")\nprint(f\"Gennemsnit: {gennemsnit}\")\n\n</textarea>\n<button class=\"run-button\" onclick=\"runPython(document.getElementById('code2').value, 'output2')\">\n  <img src=\"resources/python-file.png\" alt=\"Python\" style=\"height: 50px;\">\n</button>\n<button class=\"reset-button\" onclick=\"resetPythonGlobals()\">\n  <img src=\"resources/dust.png\" alt=\"Python\" style=\"height: 50px;\">\n</button>\n</div>\n<div class=\"code-output\" id=\"output2\"></div>\n</div>\n\n::: {.incremental}\n\nHvad har vi implementeret her: \n\n1. $\\text{total} = \\sum_{i=1}^{n} \\text{sales}_i$\n\n2. $\\text{gennemsnit} = \\frac{\\text{total}}{n} = \\frac{\\sum_{i=1}^{n} \\text{sales}_i}{n}$, Hvor $n$ er antallet af salgstal i datas칝ttet.\n\n3. Udskriv resultatet\n\n:::\n\n## *Niveau 4*: Maskinsprog \n\nMaskinen forst친r ikke `Python` (?!)\n\n- Computeren forst친r kun maskinkode. Dette er lav-niveau instruktioner best친ende af $1$-taller og $0$'er (binary), som **CPU**'en kan arbejde med.\n\n- **Python-fortolkeren** overs칝tter alts친 koden til noget som maskinen kan forst친; og Python er muligt at l칝se for mennesker. \n\n- Denne overs칝ttelse forg친r i en mellemform (assembly-sprog), der er **meget** mere besv칝rligt at arbejde med end Python. \n\n---\n\n**Process:**\n\nH칮j-niveau: \n\n```\ntotal = sum(data)  \ngennemsnit = total / len(data)\n```\n\nMellem-niveau: \n\n```\nLOAD data\nADD all values\nDIVIDE by count\nSTORE result\n```\n\nLav-niveau: \n\n```\n10110000 01100001\n```\n\n## Pr칝cision er n칮glen! \n\n> \"Kan du hente en kop kaffen?\" \n\nVi forst친r implicit: **G친 ud i k칮kkenet, tag en kop, h칝ld kaffe i koppen, kom tilbage**.\n\nOversat til eksplicitte instruktioner:\n\n::: {.incremental}\n\n1. `cup = get_cup_from_kitchen()`\n2. `coffee = pour_coffee(cup)`\n3. `return coffee_to_desk(cup)`\n\n:::\n\n## Pr칝cise instrukser \n\n> Hvilke salg er st칮rre end 10.000 (DKK)?\n\n1. Tag f칮rste tal fra listen\n2. Er det st칮rre end 10.000? Hvis ja, print det\n3. Tag n칝ste tal\n4. Gentag (2)\n5. Gentag 1-4 indtil listen er tom\n\n---\n\n\n<div class=\"code-container\">\n<div class=\"code-input\">\n<textarea class=\"python-editor\" id=\"code1.1\">\n\nfor tal in data['sales']:\n    if tal > 10000:\n        print(\"H칮jt salg:\", tal)\n\n</textarea>\n<button class=\"run-button\" onclick=\"runPython(document.getElementById('code1.1').value, 'output1.1')\">\n  <img src=\"resources/python-file.png\" alt=\"Python\" style=\"height: 50px;\">\n</button>\n<button class=\"reset-button\" onclick=\"resetPythonGlobals()\">\n  <img src=\"resources/dust.png\" alt=\"Python\" style=\"height: 50px;\">\n</button>\n</div>\n<div class=\"code-output\" id=\"output1.1\"></div>\n</div>\n\n$$\n\\begin{aligned}\n\\textbf{for hvert } \\text{tal} ~ i ~ \\text{salgstal}: \\\\\n\\quad \\textbf{hvis } \\text{tal} ~st칮rre~end~ 10000: \\\\\n\\qquad \\textbf{udskriv} ~ \\text{tal} ~~\n\\end{aligned}\n$$\n\n## Variable og Pythons *hukommelse* \n\n**Bem칝rk**: `data` har virket flere steder i vores kode, selvom vi kun har indl칝st den 칠n gang. \n\n<div class=\"code-container\">\n<div class=\"code-input\">\n<textarea class=\"python-editor\" id=\"code3\">\n\npris = 100\n\nmoms = pris * 0.25\n\ntotal = pris + moms\n\nprint(total)\n\n</textarea>\n<button class=\"run-button\" onclick=\"runPython(document.getElementById('code3').value, 'output3')\">\n  <img src=\"resources/python-file.png\" alt=\"Python\" style=\"height: 50px;\">\n</button>\n<button class=\"reset-button\" onclick=\"resetPythonGlobals()\">\n  <img src=\"resources/dust.png\" alt=\"Python\" style=\"height: 50px;\">\n</button>\n</div>\n<div class=\"code-output\" id=\"output3\"></div>\n</div>\n\n---\n\n<br><br>\n\n```\npris = 100\n\nmoms = pris * 0.25\n\ntotal = pris + moms\n\nprint(total)\n```\n\n<br>\n\n1. Tag v칝rdien 100 og gem det i **hukommelseslokation** kaldet 'pris'\n\n2. Tag v칝rdien fra 'pris', gang med 0.25, gem resultatet som 'moms'\n\nMaskinen er ligeglad med om navne giver mening. Vi bruger **meningsfulde navne** for at forst친 vores egen kode. \n\n## Funktioner: Genanvendelige \"opskrifter\"\n\n**Defination af funktioner** svarer til at l칝re maskinen en ny \"kommando\". Nu kan vi sige `beregn_moms(tal)` og maskinen ved pr칝cist, hvad den skal g칮re, fordi vi har defineret hver eneste trin.\n\n<div class=\"code-container\">\n<div class=\"code-input\">\n<textarea class=\"python-editor\" id=\"code4\">\n\ndef beregn_moms(pris, moms_sats=0.25):\n    return pris * moms_sats\n\n</textarea>\n<button class=\"run-button\" onclick=\"runPython(document.getElementById('code4').value, 'output4')\">\n  <img src=\"resources/python-file.png\" alt=\"Python\" style=\"height: 50px;\">\n</button>\n<button class=\"reset-button\" onclick=\"resetPythonGlobals()\">\n  <img src=\"resources/dust.png\" alt=\"Python\" style=\"height: 50px;\">\n</button>\n</div>\n<div class=\"code-output\" id=\"output4\"></div>\n</div>\n\n---\n\n<div class=\"code-container\">\n<div class=\"code-input\">\n<textarea class=\"python-editor\" id=\"code5\">\n\nprint(beregn_moms(12485))\n\nprint(beregn_moms(12485, moms_sats=0.12))\n\n</textarea>\n<button class=\"run-button\" onclick=\"runPython(document.getElementById('code5').value, 'output5')\">\n  <img src=\"resources/python-file.png\" alt=\"Python\" style=\"height: 50px;\">\n</button>\n<button class=\"reset-button\" onclick=\"resetPythonGlobals()\">\n  <img src=\"resources/dust.png\" alt=\"Python\" style=\"height: 50px;\">\n</button>\n</div>\n<div class=\"code-output\" id=\"output5\"></div>\n</div>\n\n## Den fundamentale erkendelse om maskiner \n\nMaskiner er utroligt dumme men **utroligt hurtige og p친lidelige**. De kan kun g칮re simple ting som:\n\n- Gemme tal\n- Sammenligne v칝rdier\n- Hoppe til forskellige dele af koden\n- Gentage instruktioner\n\nMen de kan g칮re disse simple ting milliarder af gange per sekund uden fejl.\n\n> **Kodningens kunst** ligger i at bryde komplekse menneskelige problemer ned til disse simple operationer og derefter komponere dem sammen til kraftfulde l칮sninger.\n\n## *Computational Social Science* \n\nEks.: *Digitale metoder til kriminalitetsforst친else*\n\nAnalytisk g친r vi g친r fra **sm친, lokale unders칮gelser** til analyser af **massive datas칝t** der kan afsl칮re m칮nstre, vi aldrig kunne have set med traditionelle metoder.\n\n::: {style=\"font-size: 0.7em;\"}\n\n- **Traditionel tilgang**: En kriminolog interviewer 50 tidligere indsatte over 6 m친neder for at forst친 tilbagefald-m칮nstre.\n\n- **Computational tilgang**: Analyser alle $n$ millioner straffesager fra de sidste 20 친r og identificer risikofaktorer for tilbagefald.\n\n:::\n\n<div class=\"code-container\">\n<div class=\"code-input\">\n<textarea class=\"python-editor\" id=\"code6\">\n\n# Find tilbagefalds-m칮nstre i nationale registre\nurl = \"https://tinyurl.com/3ja8pcfv\"\n\nrecidiv_data = pd.read_csv(url)\n\nrisiko_faktorer = recidiv_data.groupby(['krimtype', 'tidligere_domme']).agg({\n    'dage_til_tilbagefald': 'median'\n})\n\nprint(risiko_faktorer)\n\n</textarea>\n<button class=\"run-button\" onclick=\"runPython(document.getElementById('code6').value, 'output6')\">\n  <img src=\"resources/python-file.png\" alt=\"Python\" style=\"height: 50px;\">\n</button>\n<button class=\"reset-button\" onclick=\"resetPythonGlobals()\">\n  <img src=\"resources/dust.png\" alt=\"Python\" style=\"height: 50px;\">\n</button>\n</div>\n<div class=\"code-output\" id=\"output6\"></div>\n</div>\n\n## *Spatial* kriminologi: N친r kriminalitet [data] f친r koordinater\n\n<div class=\"code-container\">\n<div class=\"code-input\">\n<textarea class=\"python-editor\" id=\"code7\">\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import DBSCAN\nfrom io import StringIO\n\nurl = \"https://tinyurl.com/4r8tj95v\"\ncrime_data = pd.read_csv(url)  \n\ncoords = crime_data[['latitude', 'longitude']]\nclusters = DBSCAN(eps=0.005, min_samples=2).fit(coords)\n\n# Visualiser p친 kort\nfig, ax = plt.subplots(figsize=(12, 8))\n\nscatter = ax.scatter(crime_data['longitude'], crime_data['latitude'], \n                    c=clusters.labels_, \n                    cmap='viridis', \n                    alpha=0.7, \n                    s=60, \n                    edgecolors='black', \n                    linewidth=0.5)\n\nax.set_xlabel('Longitude')\nax.set_ylabel('Latitude')\nax.set_title('Kriminalitets Hot Spots\\n(Farver viser clusters)')\nax.grid(True, alpha=0.3)\n\n# Tilf칮j colorbar\ncbar = plt.colorbar(scatter)\ncbar.set_label('Cluster ID (-1 = st칮j/outliers)')\n\nplt.tight_layout()\nplt.show()\n\n</textarea>\n<button class=\"run-button\" onclick=\"runPython(document.getElementById('code7').value, 'output7')\">\n  <img src=\"resources/python-file.png\" alt=\"Python\" style=\"height: 50px;\">\n</button>\n<button class=\"reset-button\" onclick=\"resetPythonGlobals()\">\n  <img src=\"resources/dust.png\" alt=\"Python\" style=\"height: 50px;\">\n</button>\n</div>\n<div class=\"code-output\" id=\"output7\"></div>\n</div>\n\n# Arbejde [med Python] i UCloud \n\n## Cloud computing and HPC \n\n- **HPC**: At bruge mange kraftige computere, som er koblet sammen i store klynger (clusters), til at l칮se komplekse og kr칝vende opgaver.\n\n- **Cloud computing**: Adgang til computerressourcer (fx programmer, lagerplads og regnekraft) via internettet, fremfor at have det hele installeret p친 sin egen computer.\n\n- **UCloud**: En dansk platform udviklet af Syddansk Universitet (SDU) og Aalborg Universitet (AAU). Den g칮r det muligt for forskere, undervisere og studerende at udnytte HPC-ressourcer p친 en enkel m친de.\n\n::: {style=\"font-size: 0.7em;\"}\n\n  - **K칮re programmer uden installation**: UCloud tilbyder et bibliotek af applikationer (fx RStudio, Jupyter Notebooks, MATLAB, Stata, Python, osv.), som kan startes direkte i browseren.\n\n  - **Brug HPC-ressourcer:** N친r du starter en applikation, v칝lger du selv hvor meget regnekraft (CPU, GPU, RAM) du har brug for. Du arbejder stadig i en browser, men beregningen sker p친 en HPC-klynge.\n\n  - **Datah친ndtering**: Du kan uploade, downloade og organisere dine data direkte i UCloud. Der er ogs친 muligheder for sikker deling af data med kolleger.\n\n  - **Samarbejde**: Projekter i UCloud kan deles med andre brugere, s친 man kan arbejde p친 de samme data og applikationer.\n\n::: \n\n## UCloud i praksis\n\n1. **Log ind** med WAYF (universitetslogin).\n\n2. **V칝lg et projekt**: Al arbejde i UCloud foreg친r i projekter, hvor du kan organisere applikationer, data og brugere.\n\n3. **Start en applikation**: Fx Jupyter, og v칝lg hvor meget regnekraft du skal bruge.\n\n4. Arbejd som normalt i applikationen, men med adgang til langt kraftigere ressourcer end din egen computer.\n\n5. Gem og del resultater: alt bliver gemt i dit projekt, og kan deles med andre eller eksporteres til lokal computer."},"formats":{"revealjs":{"identifier":{"display-name":"RevealJS","target-format":"revealjs","base-format":"revealjs"},"execute":{"fig-width":10,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":true,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","html-math-method":{"method":"mathjax","url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.9/MathJax.js?config=TeX-AMS_HTML-full"},"slide-level":2,"to":"revealjs","highlight-style":"github","include-after-body":["/Users/jeppefl/Library/CloudStorage/OneDrive-AalborgUniversitet/01_work/undervisning/udvikling-it/slides/lektion-1/resources/timer.html"],"embed-resources":true,"include-in-header":[{"text":"<script src=\"https://cdn.jsdelivr.net/pyodide/v0.26.4/full/pyodide.js\"></script>\n<link rel=\"stylesheet\" href=\"resources/pyodide-styles.css\">\n<script src=\"resources/pyodide-setup.js\"></script>\n"}],"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.7.31","auto-stretch":true,"theme":"default","transition":"slide","backgroundTransition":"fade","scrollable":true,"controls":true,"navigationMode":"default","title":"F칮rste m칮de med Python og UCloud","subtitle":"","author":"Jeppe Fjeldgaard Qvist","date":"today","slideNumber":"c","showSlideNumber":"print","smaller":true}}},"projectFormats":["revealjs"]}